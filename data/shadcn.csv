file_name,file_content,file_path,token,description,usage_example,props,mdx_description,mdx_token
accordion.tsx,"""use client""

import * as React from ""react""
import * as AccordionPrimitive from ""@radix-ui/react-accordion""
import { ChevronDown } from ""lucide-react""

import { cn } from ""@/lib/utils""

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn(""border-b"", className)}
    {...props}
  />
))
AccordionItem.displayName = ""AccordionItem""

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className=""flex"">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        ""flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180"",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className=""h-4 w-4 shrink-0 transition-transform duration-200"" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className=""overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down""
    {...props}
  >
    <div className={cn(""pb-4 pt-0"", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
",www\registry\default\ui\accordion.tsx,446,"This component is a customizable accordion feature built with React and Radix UI. It consists of four main parts: Accordion (the container), AccordionItem (each item in the accordion), AccordionTrigger (the clickable part of each item to expand/collapse content), and AccordionContent (the content that is shown or hidden when the accordion item is triggered). The components are styled with utility classes and can be further customized via props.",<Accordion defaultValue='item1' type='single' collapsible><AccordionItem value='item1'><AccordionTrigger>Section 1</AccordionTrigger><AccordionContent>Content 1</AccordionContent></AccordionItem><AccordionItem value='item2'><AccordionTrigger>Section 2</AccordionTrigger><AccordionContent>Content 2</AccordionContent></AccordionItem></Accordion>,"Accordion: defaultValue: string, type: 'single' | 'multiple', collapsible: boolean, AccordionItem: value: string, className: string, AccordionTrigger: className: string, children: React.ReactNode, AccordionContent: className: string, children: React.ReactNode","---
title: Accordion
description: A vertically stacked set of interactive headings that each reveal a section of content.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/accordion
  api: https://www.radix-ui.com/docs/primitives/components/accordion#api-reference
---

<ComponentPreview
  name=""accordion-demo""
  className=""[&_.preview>[data-orientation=vertical]]:sm:max-w-[70%]""
/>

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>

<TabsContent value=""cli"">

<Steps>

<Step>Run the following command:</Step>

```bash
npx shadcn-ui@latest add accordion
```

<Step>Update `tailwind.config.js`</Step>

Add the following animations to your `tailwind.config.js` file:

```js title=""tailwind.config.js"" {5-18}
/** @type {import('tailwindcss').Config} */
module.exports = {
  theme: {
    extend: {
      keyframes: {
        ""accordion-down"": {
          from: { height: ""0"" },
          to: { height: ""var(--radix-accordion-content-height)"" },
        },
        ""accordion-up"": {
          from: { height: ""var(--radix-accordion-content-height)"" },
          to: { height: ""0"" },
        },
      },
      animation: {
        ""accordion-down"": ""accordion-down 0.2s ease-out"",
        ""accordion-up"": ""accordion-up 0.2s ease-out"",
      },
    },
  },
}
```

</Steps>

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-accordion
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""accordion"" />

<Step>Update the import paths to match your project setup.</Step>

<Step>Update `tailwind.config.js`</Step>

Add the following animations to your `tailwind.config.js` file:

```js title=""tailwind.config.js"" {5-18}
/** @type {import('tailwindcss').Config} */
module.exports = {
  theme: {
    extend: {
      keyframes: {
        ""accordion-down"": {
          from: { height: ""0"" },
          to: { height: ""var(--radix-accordion-content-height)"" },
        },
        ""accordion-up"": {
          from: { height: ""var(--radix-accordion-content-height)"" },
          to: { height: ""0"" },
        },
      },
      animation: {
        ""accordion-down"": ""accordion-down 0.2s ease-out"",
        ""accordion-up"": ""accordion-up 0.2s ease-out"",
      },
    },
  },
}
```

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from ""@/components/ui/accordion""
```

```tsx
<Accordion type=""single"" collapsible>
  <AccordionItem value=""item-1"">
    <AccordionTrigger>Is it accessible?</AccordionTrigger>
    <AccordionContent>
      Yes. It adheres to the WAI-ARIA design pattern.
    </AccordionContent>
  </AccordionItem>
</Accordion>
```
",749.0
alert-dialog.tsx,"""use client""

import * as React from ""react""
import * as AlertDialogPrimitive from ""@radix-ui/react-alert-dialog""

import { cn } from ""@/lib/utils""
import { buttonVariants } from ""@/registry/default/ui/button""

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      ""fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0"",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        ""fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg"",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      ""flex flex-col space-y-2 text-center sm:text-left"",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = ""AlertDialogHeader""

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      ""flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2"",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = ""AlertDialogFooter""

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn(""text-lg font-semibold"", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn(""text-sm text-muted-foreground"", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: ""outline"" }),
      ""mt-2 sm:mt-0"",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
",www\registry\default\ui\alert-dialog.tsx,969,"This component is a comprehensive implementation of an alert dialog using @radix-ui/react-alert-dialog primitives, providing a customizable and accessible dialog interface for alerting users. It encapsulates various parts of a dialog, such as the overlay, content, title, description, actions, and cancel button, each with customizable styling and functionality. The implementation ensures accessibility by using the appropriate Radix UI primitives and offers extensive customization through props for different parts of the dialog, making it suitable for a wide range of alert dialog scenarios.","<AlertDialog>
  <AlertDialogTrigger asChild>
    <button>Show Dialog</button>
  </AlertDialogTrigger>
  <AlertDialogContent>
    <AlertDialogTitle>Confirm Action</AlertDialogTitle>
    <AlertDialogDescription>This action is irreversible. Proceed?</AlertDialogDescription>
    <AlertDialogFooter>
      <AlertDialogAction onClick={() => console.log('Action confirmed')}>Yes, proceed</AlertDialogAction>
      <AlertDialogCancel>Cancel</AlertDialogCancel>
    </AlertDialogFooter>
  </AlertDialogContent>
</AlertDialog>","AlertDialog: None, AlertDialogPortal: None, AlertDialogOverlay: className: string, AlertDialogTrigger: asChild: boolean, AlertDialogContent: className: string, AlertDialogHeader: className: string, AlertDialogFooter: className: string, AlertDialogTitle: className: string, AlertDialogDescription: className: string, AlertDialogAction: className: string, AlertDialogCancel: className: string","---
title: Alert Dialog
description: A modal dialog that interrupts the user with important content and expects a response.
featured: true
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/alert-dialog
  api: https://www.radix-ui.com/docs/primitives/components/alert-dialog#api-reference
---

<ComponentPreview name=""alert-dialog-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add alert-dialog
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-alert-dialog
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""alert-dialog"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from ""@/components/ui/alert-dialog""
```

```tsx
<AlertDialog>
  <AlertDialogTrigger>Open</AlertDialogTrigger>
  <AlertDialogContent>
    <AlertDialogHeader>
      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
      <AlertDialogDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </AlertDialogDescription>
    </AlertDialogHeader>
    <AlertDialogFooter>
      <AlertDialogCancel>Cancel</AlertDialogCancel>
      <AlertDialogAction>Continue</AlertDialogAction>
    </AlertDialogFooter>
  </AlertDialogContent>
</AlertDialog>
```
",404.0
alert.tsx,"import * as React from ""react""
import { cva, type VariantProps } from ""class-variance-authority""

import { cn } from ""@/lib/utils""

const alertVariants = cva(
  ""relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground"",
  {
    variants: {
      variant: {
        default: ""bg-background text-foreground"",
        destructive:
          ""border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive"",
      },
    },
    defaultVariants: {
      variant: ""default"",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role=""alert""
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = ""Alert""

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn(""mb-1 font-medium leading-none tracking-tight"", className)}
    {...props}
  />
))
AlertTitle.displayName = ""AlertTitle""

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(""text-sm [&_p]:leading-relaxed"", className)}
    {...props}
  />
))
AlertDescription.displayName = ""AlertDescription""

export { Alert, AlertTitle, AlertDescription }
",www\registry\default\ui\alert.tsx,404,"The `Alert` component is designed to display alert messages to users, allowing for customization through variants. It includes accompanying subcomponents `AlertTitle` and `AlertDescription` for more structured content. The `Alert` component utilizes `class-variance-authority` for styling variants, enabling different visual styles such as 'default' and 'destructive'.",<Alert variant='destructive'><svg>...</svg><div><AlertTitle>Title</AlertTitle><AlertDescription>Description</AlertDescription></div></Alert>,"className: string, variant: 'default' | 'destructive', ref: React.Ref<HTMLDivElement>, React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>","---
title: Alert
description: Displays a callout for user attention.
component: true
---

<ComponentPreview name=""alert-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add alert
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""alert"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { Alert, AlertDescription, AlertTitle } from ""@/components/ui/alert""
```

```tsx
<Alert>
  <Terminal className=""h-4 w-4"" />
  <AlertTitle>Heads up!</AlertTitle>
  <AlertDescription>
    You can add components and dependencies to your app using the cli.
  </AlertDescription>
</Alert>
```

## Examples

### Default

<ComponentPreview name=""alert-demo"" />

### Destructive

<ComponentPreview name=""alert-destructive"" />
",267.0
aspect-ratio.tsx,"""use client""

import * as AspectRatioPrimitive from ""@radix-ui/react-aspect-ratio""

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
",www\registry\default\ui\aspect-ratio.tsx,34,"The AspectRatio component is used to create a box with a specific aspect ratio. It is built on top of the @radix-ui/react-aspect-ratio library, providing a convenient way to maintain the size ratio of an element. This is particularly useful for images, videos, or any content where maintaining the aspect ratio is necessary for the content's integrity and aesthetic.","<AspectRatio ratio={16 / 9} style={{ width: '100%', height: 'auto' }}><img src='path/to/image' alt='Descriptive text'/></AspectRatio>","ratio: number, style: CSSProperties, children: ReactNode","---
title: Aspect Ratio
description: Displays content within a desired ratio.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/aspect-ratio
  api: https://www.radix-ui.com/docs/primitives/components/aspect-ratio#api-reference
---

<ComponentPreview name=""aspect-ratio-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add aspect-ratio
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-aspect-ratio
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""aspect-ratio"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import Image from ""next/image""

import { AspectRatio } from ""@/components/ui/aspect-ratio""
```

```tsx
<div className=""w-[450px]"">
  <AspectRatio ratio={16 / 9}>
    <Image src=""..."" alt=""Image"" className=""rounded-md object-cover"" />
  </AspectRatio>
</div>
```
",309.0
avatar.tsx,"""use client""

import * as React from ""react""
import * as AvatarPrimitive from ""@radix-ui/react-avatar""

import { cn } from ""@/lib/utils""

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      ""relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full"",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn(""aspect-square h-full w-full"", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      ""flex h-full w-full items-center justify-center rounded-full bg-muted"",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
",www\registry\default\ui\avatar.tsx,311,"This component utilizes the Radix UI Avatar package to create a flexible and customizable avatar system. It includes three main components: Avatar, AvatarImage, and AvatarFallback, each designed to handle different aspects of displaying an avatar. The Avatar component acts as a container with a default style, AvatarImage is used for displaying the image, and AvatarFallback provides a fallback UI in case the image fails to load.","<Avatar className='custom-avatar-class'>
  <AvatarImage src='path/to/image.jpg' alt='User avatar' />
  <AvatarFallback delayMs={600}>A</AvatarFallback>
</Avatar>","Avatar: className: string, AvatarImage: className: string, src: string, alt: string, AvatarFallback: className: string, delayMs: number","---
title: Avatar
description: An image element with a fallback for representing the user.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/avatar
  api: https://www.radix-ui.com/docs/primitives/components/avatar#api-reference
---

<ComponentPreview name=""avatar-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add avatar
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-avatar
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""avatar"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { Avatar, AvatarFallback, AvatarImage } from ""@/components/ui/avatar""
```

```tsx
<Avatar>
  <AvatarImage src=""https://github.com/shadcn.png"" />
  <AvatarFallback>CN</AvatarFallback>
</Avatar>
```
",280.0
badge.tsx,"import * as React from ""react""
import { cva, type VariantProps } from ""class-variance-authority""

import { cn } from ""@/lib/utils""

const badgeVariants = cva(
  ""inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"",
  {
    variants: {
      variant: {
        default:
          ""border-transparent bg-primary text-primary-foreground hover:bg-primary/80"",
        secondary:
          ""border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80"",
        destructive:
          ""border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80"",
        outline: ""text-foreground"",
      },
    },
    defaultVariants: {
      variant: ""default"",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
",www\registry\default\ui\badge.tsx,256,"The Badge component is a flexible display element used to add a small count or label to another element. It leverages the 'class-variance-authority' library for handling variants, allowing for different styles such as 'default', 'secondary', 'destructive', and 'outline'. The component is designed to be easily customizable and can be integrated seamlessly with other UI elements.",<Badge className='custom-class' variant='secondary'>Your Text Here</Badge>,"className: string, variant: 'default' | 'secondary' | 'destructive' | 'outline', ...props: React.HTMLAttributes<HTMLDivElement>","---
title: Badge
description: Displays a badge or a component that looks like a badge.
component: true
---

<ComponentPreview name=""badge-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add badge
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""badge"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { Badge } from ""@/components/ui/badge""
```

```tsx
<Badge variant=""outline"">Badge</Badge>
```

### Link

You can use the `badgeVariants` helper to create a link that looks like a badge.

```tsx
import { badgeVariants } from ""@/components/ui/badge""
```

```tsx
<Link className={badgeVariants({ variant: ""outline"" })}>Badge</Link>
```

## Examples

### Default

<ComponentPreview name=""badge-demo"" />

---

### Secondary

<ComponentPreview name=""badge-secondary"" />

---

### Outline

<ComponentPreview name=""badge-outline"" />

---

### Destructive

<ComponentPreview name=""badge-destructive"" />
",310.0
button.tsx,"import * as React from ""react""
import { Slot } from ""@radix-ui/react-slot""
import { cva, type VariantProps } from ""class-variance-authority""

import { cn } from ""@/lib/utils""

const buttonVariants = cva(
  ""inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50"",
  {
    variants: {
      variant: {
        default: ""bg-primary text-primary-foreground hover:bg-primary/90"",
        destructive:
          ""bg-destructive text-destructive-foreground hover:bg-destructive/90"",
        outline:
          ""border border-input bg-background hover:bg-accent hover:text-accent-foreground"",
        secondary:
          ""bg-secondary text-secondary-foreground hover:bg-secondary/80"",
        ghost: ""hover:bg-accent hover:text-accent-foreground"",
        link: ""text-primary underline-offset-4 hover:underline"",
      },
      size: {
        default: ""h-10 px-4 py-2"",
        sm: ""h-9 rounded-md px-3"",
        lg: ""h-11 rounded-md px-8"",
        icon: ""h-10 w-10"",
      },
    },
    defaultVariants: {
      variant: ""default"",
      size: ""default"",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : ""button""
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = ""Button""

export { Button, buttonVariants }
",www\registry\default\ui\button.tsx,435,"The Button component is a flexible UI element built with React and TypeScript, utilizing the Radix UI Slot component for composition and the class-variance-authority library for managing its variants. It supports multiple variants and sizes, allowing for a wide range of visual appearances and behaviors. The component can be used as a regular button or as a slot component in other composite components, making it highly reusable and adaptable to various UI contexts.",<Button variant='default' size='lg' onClick={() => console.log('Clicked!')}>Click me</Button>,"asChild?: boolean, variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link', size?: 'default' | 'sm' | 'lg' | 'icon', className?: string, all other props supported by HTMLButtonElement","---
title: Button
description: Displays a button or a component that looks like a button.
featured: true
component: true
---

<ComponentPreview name=""button-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add button
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-slot
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""button"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { Button } from ""@/components/ui/button""
```

```tsx
<Button variant=""outline"">Button</Button>
```

## Link

You can use the `buttonVariants` helper to create a link that looks like a button.

```tsx
import { buttonVariants } from ""@/components/ui/button""
```

```tsx
<Link className={buttonVariants({ variant: ""outline"" })}>Click here</Link>
```

Alternatively, you can set the `asChild` parameter and nest the link component.

```tsx
<Button asChild>
  <Link href=""/login"">Login</Link>
</Button>
```

## Examples

### Primary

<ComponentPreview name=""button-demo"" />

### Secondary

<ComponentPreview name=""button-secondary"" />

### Destructive

<ComponentPreview name=""button-destructive"" />

### Outline

<ComponentPreview name=""button-outline"" />

### Ghost

<ComponentPreview name=""button-ghost"" />

### Link

<ComponentPreview name=""button-link"" />

### Icon

<ComponentPreview name=""button-icon"" />

### With Icon

<ComponentPreview name=""button-with-icon"" />

### Loading

<ComponentPreview name=""button-loading"" />

### As Child

<ComponentPreview name=""button-as-child"" />
",444.0
calendar.tsx,"""use client""

import * as React from ""react""
import { ChevronLeft, ChevronRight } from ""lucide-react""
import { DayPicker } from ""react-day-picker""

import { cn } from ""@/lib/utils""
import { buttonVariants } from ""@/registry/default/ui/button""

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn(""p-3"", className)}
      classNames={{
        months: ""flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0"",
        month: ""space-y-4"",
        caption: ""flex justify-center pt-1 relative items-center"",
        caption_label: ""text-sm font-medium"",
        nav: ""space-x-1 flex items-center"",
        nav_button: cn(
          buttonVariants({ variant: ""outline"" }),
          ""h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100""
        ),
        nav_button_previous: ""absolute left-1"",
        nav_button_next: ""absolute right-1"",
        table: ""w-full border-collapse space-y-1"",
        head_row: ""flex"",
        head_cell:
          ""text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]"",
        row: ""flex w-full mt-2"",
        cell: ""h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20"",
        day: cn(
          buttonVariants({ variant: ""ghost"" }),
          ""h-9 w-9 p-0 font-normal aria-selected:opacity-100""
        ),
        day_range_end: ""day-range-end"",
        day_selected:
          ""bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground"",
        day_today: ""bg-accent text-accent-foreground"",
        day_outside:
          ""day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30"",
        day_disabled: ""text-muted-foreground opacity-50"",
        day_range_middle:
          ""aria-selected:bg-accent aria-selected:text-accent-foreground"",
        day_hidden: ""invisible"",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className=""h-4 w-4"" />,
        IconRight: ({ ...props }) => <ChevronRight className=""h-4 w-4"" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = ""Calendar""

export { Calendar }
",www\registry\default\ui\calendar.tsx,660,"The Calendar component is a wrapper around the react-day-picker library's DayPicker component, customized with additional styles and functionality. It supports all the props of DayPicker and adds custom styling for different parts of the calendar UI such as months, navigation buttons, and days. It also provides default visibility for outside days and allows for further customization through a className or classNames props.",<Calendar className='my-custom-class' showOutsideDays={false} />,"className: string, classNames: object, showOutsideDays: boolean","---
title: Calendar
description: A date field component that allows users to enter and edit date.
component: true
links:
  doc: https://react-day-picker.js.org
---

<ComponentPreview name=""calendar-demo"" />

## About

The `Calendar` component is built on top of [React DayPicker](https://react-day-picker.js.org).

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add calendar
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install react-day-picker date-fns
```

<Step>Add the `Button` component to your project.</Step>

The `Calendar` component uses the `Button` component. Make sure you have it installed in your project.

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""calendar"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { Calendar } from ""@/components/ui/calendar""
```

```tsx
const [date, setDate] = React.useState<Date | undefined>(new Date())

return (
  <Calendar
    mode=""single""
    selected={date}
    onSelect={setDate}
    className=""rounded-md border""
  />
)
```

See the [React DayPicker](https://react-day-picker.js.org) documentation for more information.

## Date Picker

You can use the `<Calendar>` component to build a date picker. See the [Date Picker](/docs/components/date-picker) page for more information.

## Examples

### Form

<ComponentPreview name=""calendar-form"" />
",399.0
card.tsx,"import * as React from ""react""

import { cn } from ""@/lib/utils""

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      ""rounded-lg border bg-card text-card-foreground shadow-sm"",
      className
    )}
    {...props}
  />
))
Card.displayName = ""Card""

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(""flex flex-col space-y-1.5 p-6"", className)}
    {...props}
  />
))
CardHeader.displayName = ""CardHeader""

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      ""text-2xl font-semibold leading-none tracking-tight"",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = ""CardTitle""

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn(""text-sm text-muted-foreground"", className)}
    {...props}
  />
))
CardDescription.displayName = ""CardDescription""

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn(""p-6 pt-0"", className)} {...props} />
))
CardContent.displayName = ""CardContent""

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(""flex items-center p-6 pt-0"", className)}
    {...props}
  />
))
CardFooter.displayName = ""CardFooter""

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
",www\registry\default\ui\card.tsx,468,"The Card component and its subcomponents (CardHeader, CardFooter, CardTitle, CardDescription, CardContent) are designed to create a consistent and customizable card layout. Each subcomponent targets a specific area of the card, allowing for flexible composition and styling.","<Card className='custom-card-class'>
  <CardHeader className='custom-header-class'>
    <CardTitle>Title of Card</CardTitle>
    <CardDescription>Description here</CardDescription>
  </CardHeader>
  <CardContent>
    Content goes here
  </CardContent>
  <CardFooter className='custom-footer-class'>
    Footer content
  </CardFooter>
</Card>","className: string, ...props: React.HTMLAttributes<HTMLDivElement> | React.HTMLAttributes<HTMLParagraphElement> | React.HTMLAttributes<HTMLHeadingElement>","---
title: Card
description: Displays a card with header, content, and footer.
component: true
---

<ComponentPreview name=""card-with-form"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add card
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""card"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from ""@/components/ui/card""
```

```tsx
<Card>
  <CardHeader>
    <CardTitle>Card Title</CardTitle>
    <CardDescription>Card Description</CardDescription>
  </CardHeader>
  <CardContent>
    <p>Card Content</p>
  </CardContent>
  <CardFooter>
    <p>Card Footer</p>
  </CardFooter>
</Card>
```

## Examples

<ComponentPreview name=""card-demo"" />
",288.0
carousel.tsx,"""use client""

import * as React from ""react""
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from ""embla-carousel-react""
import { ArrowLeft, ArrowRight } from ""lucide-react""

import { cn } from ""@/lib/utils""
import { Button } from ""@/registry/default/ui/button""

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: ""horizontal"" | ""vertical""
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error(""useCarousel must be used within a <Carousel />"")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = ""horizontal"",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === ""horizontal"" ? ""x"" : ""y"",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === ""ArrowLeft"") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === ""ArrowRight"") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on(""reInit"", onSelect)
      api.on(""select"", onSelect)

      return () => {
        api?.off(""select"", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === ""y"" ? ""vertical"" : ""horizontal""),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn(""relative"", className)}
          role=""region""
          aria-roledescription=""carousel""
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = ""Carousel""

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className=""overflow-hidden"">
      <div
        ref={ref}
        className={cn(
          ""flex"",
          orientation === ""horizontal"" ? ""-ml-4"" : ""-mt-4 flex-col"",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = ""CarouselContent""

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role=""group""
      aria-roledescription=""slide""
      className={cn(
        ""min-w-0 shrink-0 grow-0 basis-full"",
        orientation === ""horizontal"" ? ""pl-4"" : ""pt-4"",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = ""CarouselItem""

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = ""outline"", size = ""icon"", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        ""absolute  h-8 w-8 rounded-full"",
        orientation === ""horizontal""
          ? ""-left-12 top-1/2 -translate-y-1/2""
          : ""-top-12 left-1/2 -translate-x-1/2 rotate-90"",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className=""h-4 w-4"" />
      <span className=""sr-only"">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = ""CarouselPrevious""

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = ""outline"", size = ""icon"", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        ""absolute h-8 w-8 rounded-full"",
        orientation === ""horizontal""
          ? ""-right-12 top-1/2 -translate-y-1/2""
          : ""-bottom-12 left-1/2 -translate-x-1/2 rotate-90"",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className=""h-4 w-4"" />
      <span className=""sr-only"">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = ""CarouselNext""

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
",www\registry\default\ui\carousel.tsx,1515,"The carousel component is a flexible and reusable component designed to display a collection of items in a scrollable format, either horizontally or vertically. It utilizes the 'embla-carousel-react' library for carousel functionality and provides a context and hooks for easy integration and control within React applications. The component supports custom options, plugins, and orientation settings, and exposes an API for direct interaction. It is structured into several sub-components including Carousel (the main wrapper), CarouselContent (the container for carousel items), CarouselItem (individual items), CarouselPrevious (a button for scrolling to the previous item), and CarouselNext (a button for scrolling to the next item).",<Carousel opts={{ loop: false }} orientation='horizontal' setApi={setCarouselApi}> <CarouselContent> <CarouselItem>Item 1</CarouselItem> <CarouselItem>Item 2</CarouselItem> <CarouselItem>Item 3</CarouselItem> </CarouselContent> <CarouselPrevious /> <CarouselNext /> </Carousel>,"opts?: CarouselOptions, plugins?: CarouselPlugin, orientation?: 'horizontal' | 'vertical', setApi?: (api: CarouselApi) => void","---
title: Carousel
description: A carousel with motion and swipe built using Embla.
component: true
links:
  doc: https://www.embla-carousel.com/get-started/react
  api: https://www.embla-carousel.com/api
---

<ComponentPreview name=""carousel-demo"" />

## About

The carousel component is built using the [Embla Carousel](https://www.embla-carousel.com/) library.

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>

<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add carousel
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install embla-carousel-react
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""carousel"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from ""@/components/ui/carousel""
```

```tsx
<Carousel>
  <CarouselContent>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
  </CarouselContent>
  <CarouselPrevious />
  <CarouselNext />
</Carousel>
```

## Examples

### Sizes

To set the size of the items, you can use the `basis` utility class on the `<CarouselItem />`.

<ComponentPreview name=""carousel-size"" />

```tsx title=""Example"" showLineNumbers {4-6}
// 33% of the carousel width.
<Carousel>
  <CarouselContent>
    <CarouselItem className=""basis-1/3"">...</CarouselItem>
    <CarouselItem className=""basis-1/3"">...</CarouselItem>
    <CarouselItem className=""basis-1/3"">...</CarouselItem>
  </CarouselContent>
</Carousel>
```

```tsx title=""Responsive"" showLineNumbers {4-6}
// 50% on small screens and 33% on larger screens.
<Carousel>
  <CarouselContent>
    <CarouselItem className=""md:basis-1/2 lg:basis-1/3"">...</CarouselItem>
    <CarouselItem className=""md:basis-1/2 lg:basis-1/3"">...</CarouselItem>
    <CarouselItem className=""md:basis-1/2 lg:basis-1/3"">...</CarouselItem>
  </CarouselContent>
</Carousel>
```

### Spacing

To set the spacing between the items, we use a `pl-[VALUE]` utility on the `<CarouselItem />` and a negative `-ml-[VALUE]` on the `<CarouselContent />`.

<Callout className=""mt-6"">
  **Why:** I tried to use the `gap` property or a `grid` layout on the `
  <CarouselContent />` but it required a lot of math and mental effort to get the
  spacing right. I found `pl-[VALUE]` and `-ml-[VALUE]` utilities much easier to
  use.

You can always adjust this in your own project if you need to.

</Callout>

<ComponentPreview name=""carousel-spacing"" />

```tsx title=""Example"" showLineNumbers /-ml-4/ /pl-4/
<Carousel>
  <CarouselContent className=""-ml-4"">
    <CarouselItem className=""pl-4"">...</CarouselItem>
    <CarouselItem className=""pl-4"">...</CarouselItem>
    <CarouselItem className=""pl-4"">...</CarouselItem>
  </CarouselContent>
</Carousel>
```

```tsx title=""Responsive"" showLineNumbers /-ml-2/ /pl-2/ /md:-ml-4/ /md:pl-4/
<Carousel>
  <CarouselContent className=""-ml-2 md:-ml-4"">
    <CarouselItem className=""pl-2 md:pl-4"">...</CarouselItem>
    <CarouselItem className=""pl-2 md:pl-4"">...</CarouselItem>
    <CarouselItem className=""pl-2 md:pl-4"">...</CarouselItem>
  </CarouselContent>
</Carousel>
```

### Orientation

Use the `orientation` prop to set the orientation of the carousel.

<ComponentPreview name=""carousel-orientation"" />

```tsx showLineNumbers /vertical | horizontal/
<Carousel orientation=""vertical | horizontal"">
  <CarouselContent>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
  </CarouselContent>
</Carousel>
```

## Options

You can pass options to the carousel using the `opts` prop. See the [Embla Carousel docs](https://www.embla-carousel.com/api/options/) for more information.

```tsx showLineNumbers {2-5}
<Carousel
  opts={{
    align: ""start"",
    loop: true,
  }}
>
  <CarouselContent>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
  </CarouselContent>
</Carousel>
```

## API

Use a state and the `setApi` props to get an instance of the carousel API.

<ComponentPreview name=""carousel-api"" />

```tsx showLineNumbers {1,4,22}
import { type CarouselApi } from ""@/components/ui/carousel""

export function Example() {
  const [api, setApi] = React.useState<CarouselApi>()
  const [current, setCurrent] = React.useState(0)
  const [count, setCount] = React.useState(0)

  React.useEffect(() => {
    if (!api) {
      return
    }

    setCount(api.scrollSnapList().length)
    setCurrent(api.selectedScrollSnap() + 1)

    api.on(""select"", () => {
      setCurrent(api.selectedScrollSnap() + 1)
    })
  }, [api])

  return (
    <Carousel setApi={setApi}>
      <CarouselContent>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
      </CarouselContent>
    </Carousel>
  )
}
```

## Events

You can listen to events using the api instance from `setApi`.

```tsx showLineNumbers {1,4-14,16}
import { type CarouselApi } from ""@/components/ui/carousel""

export function Example() {
  const [api, setApi] = React.useState<CarouselApi>()

  React.useEffect(() => {
    if (!api) {
      return
    }

    api.on(""select"", () => {
      // Do something on select.
    })
  }, [api])

  return (
    <Carousel setApi={setApi}>
      <CarouselContent>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
      </CarouselContent>
    </Carousel>
  )
}
```

See the [Embla Carousel docs](https://www.embla-carousel.com/api/events/) for more information on using events.

## Plugins

You can use the `plugins` prop to add plugins to the carousel.

```ts showLineNumbers {1,6-10}
import Autoplay from ""embla-carousel-autoplay""

export function Example() {
  return (
    <Carousel
      plugins={[
        Autoplay({
          delay: 2000,
        }),
      ]}
    >
      // ...
    </Carousel>
  )
}
```

<ComponentPreview name=""carousel-plugin"" />

See the [Embla Carousel docs](https://www.embla-carousel.com/api/plugins/) for more information on using plugins.
",1660.0
checkbox.tsx,"""use client""

import * as React from ""react""
import * as CheckboxPrimitive from ""@radix-ui/react-checkbox""
import { Check } from ""lucide-react""

import { cn } from ""@/lib/utils""

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      ""peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground"",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn(""flex items-center justify-center text-current"")}
    >
      <Check className=""h-4 w-4"" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
",www\registry\default\ui\checkbox.tsx,243,"This component is a customized checkbox built on top of @radix-ui/react-checkbox, featuring enhanced styling and the ability to include icons (e.g., a check mark) as indicators of the checkbox's state. It supports all the props from the Radix Checkbox component along with additional styling capabilities to customize appearance such as colors, borders, focus rings, and disabled states.",<Checkbox checked={true} onCheckedChange={(checked) => console.log(checked)} className='custom-class' disabled={false} />,"className: string, checked: boolean, onCheckedChange: (checked: boolean) => void, disabled: boolean","---
title: Checkbox
description: A control that allows the user to toggle between checked and not checked.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/checkbox
  api: https://www.radix-ui.com/docs/primitives/components/checkbox#api-reference
---

<ComponentPreview name=""checkbox-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add checkbox
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-checkbox
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""checkbox"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { Checkbox } from ""@/components/ui/checkbox""
```

```tsx
<Checkbox />
```

## Examples

### With text

<ComponentPreview name=""checkbox-with-text"" />

### Disabled

<ComponentPreview name=""checkbox-disabled"" />

### Form

<ComponentPreview name=""checkbox-form-single"" />

<ComponentPreview name=""checkbox-form-multiple"" />
",300.0
collapsible.tsx,"""use client""

import * as CollapsiblePrimitive from ""@radix-ui/react-collapsible""

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
",www\registry\default\ui\collapsible.tsx,67,"This component is a wrapper for the Collapsible components from the @radix-ui/react-collapsible package. It exports three components: Collapsible, which acts as the container for the collapsible section; CollapsibleTrigger, which is used as the button or element that toggles the collapsible section; and CollapsibleContent, which contains the content that is shown or hidden based on the collapsible state.","<Collapsible>
  <CollapsibleTrigger>Toggle</CollapsibleTrigger>
  <CollapsibleContent>
    Content to show or hide
  </CollapsibleContent>
</Collapsible>","Collapsible: defaultOpen: boolean, onOpenChange: function, CollapsibleTrigger: asChild: boolean, CollapsibleContent: asChild: boolean","---
title: Collapsible
description: An interactive component which expands/collapses a panel.
component: true
featured: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/collapsible
  api: https://www.radix-ui.com/docs/primitives/components/collapsible#api-reference
---

<ComponentPreview name=""collapsible-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add collapsible
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-collapsible
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""collapsible"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from ""@/components/ui/collapsible""
```

```tsx
<Collapsible>
  <CollapsibleTrigger>Can I use this in my project?</CollapsibleTrigger>
  <CollapsibleContent>
    Yes. Free to use for personal and commercial projects. No attribution
    required.
  </CollapsibleContent>
</Collapsible>
```
",327.0
command.tsx,"""use client""

import * as React from ""react""
import { type DialogProps } from ""@radix-ui/react-dialog""
import { Command as CommandPrimitive } from ""cmdk""
import { Search } from ""lucide-react""

import { cn } from ""@/lib/utils""
import { Dialog, DialogContent } from ""@/registry/default/ui/dialog""

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      ""flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground"",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className=""overflow-hidden p-0 shadow-lg"">
        <Command className=""[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5"">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className=""flex items-center border-b px-3"" cmdk-input-wrapper="""">
    <Search className=""mr-2 h-4 w-4 shrink-0 opacity-50"" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        ""flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50"",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn(""max-h-[300px] overflow-y-auto overflow-x-hidden"", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className=""py-6 text-center text-sm""
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      ""overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground"",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn(""-mx-1 h-px bg-border"", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      ""relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50"",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        ""ml-auto text-xs tracking-widest text-muted-foreground"",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = ""CommandShortcut""

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
",www\registry\default\ui\command.tsx,1159,"A collection of components designed to create a command palette interface, including a main Command component, CommandDialog for wrapping the command interface, CommandInput for input field, CommandList for displaying a list of commands, CommandEmpty for showing an empty state, CommandGroup for grouping commands, CommandItem for individual command items, CommandSeparator for separating command groups or items, and CommandShortcut for displaying keyboard shortcuts. These components utilize the 'cmdk' library for command functionality and are styled with utility classes.","<CommandDialog>
  <CommandInput placeholder='Type a command...'/>
  <CommandList>
    <CommandGroup>
      <CommandItem>Example Command 1<CommandShortcut>Cmd + 1</CommandShortcut></CommandItem>
      <CommandItem>Example Command 2<CommandShortcut>Cmd + 2</CommandShortcut></CommandItem>
    </CommandGroup>
    <CommandSeparator />
    <CommandGroup>
      <CommandItem>Example Command 3<CommandShortcut>Cmd + 3</CommandShortcut></CommandItem>
    </CommandGroup>
  </CommandList>
</CommandDialog>","Command: className (string), CommandDialog: children (ReactNode), CommandInput: className (string), CommandList: className (string), CommandEmpty: -, CommandGroup: className (string), CommandItem: className (string), CommandShortcut: className (string)","---
title: Command
description: Fast, composable, unstyled command menu for React.
component: true
links:
  doc: https://cmdk.paco.me
---

<ComponentPreview
  name=""command-demo""
  align=""start""
  className=""[&_.preview>div]:max-w-[450px]""
/>

## About

The `<Command />` component uses the [`cmdk`](https://cmdk.paco.me) component by [pacocoursey](https://twitter.com/pacocoursey).

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add command
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install cmdk
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""command"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import {
  Command,
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
  CommandShortcut,
} from ""@/components/ui/command""
```

```tsx
<Command>
  <CommandInput placeholder=""Type a command or search..."" />
  <CommandList>
    <CommandEmpty>No results found.</CommandEmpty>
    <CommandGroup heading=""Suggestions"">
      <CommandItem>Calendar</CommandItem>
      <CommandItem>Search Emoji</CommandItem>
      <CommandItem>Calculator</CommandItem>
    </CommandGroup>
    <CommandSeparator />
    <CommandGroup heading=""Settings"">
      <CommandItem>Profile</CommandItem>
      <CommandItem>Billing</CommandItem>
      <CommandItem>Settings</CommandItem>
    </CommandGroup>
  </CommandList>
</Command>
```

## Examples

### Dialog

<ComponentPreview name=""command-dialog"" />

To show the command menu in a dialog, use the `<CommandDialog />` component.

```tsx
export function CommandMenu() {
  const [open, setOpen] = React.useState(false)

  React.useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === ""k"" && (e.metaKey || e.ctrlKey)) {
        e.preventDefault()
        setOpen((open) => !open)
      }
    }
    document.addEventListener(""keydown"", down)
    return () => document.removeEventListener(""keydown"", down)
  }, [])

  return (
    <CommandDialog open={open} onOpenChange={setOpen}>
      <CommandInput placeholder=""Type a command or search..."" />
      <CommandList>
        <CommandEmpty>No results found.</CommandEmpty>
        <CommandGroup heading=""Suggestions"">
          <CommandItem>Calendar</CommandItem>
          <CommandItem>Search Emoji</CommandItem>
          <CommandItem>Calculator</CommandItem>
        </CommandGroup>
      </CommandList>
    </CommandDialog>
  )
}
```

### Combobox

You can use the `<Command />` component as a combobox. See the [Combobox](/docs/components/combobox) page for more information.
",717.0
context-menu.tsx,"""use client""

import * as React from ""react""
import * as ContextMenuPrimitive from ""@radix-ui/react-context-menu""
import { Check, ChevronRight, Circle } from ""lucide-react""

import { cn } from ""@/lib/utils""

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      ""flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground"",
      inset && ""pl-8"",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className=""ml-auto h-4 w-4"" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      ""z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2"",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        ""z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2"",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      ""relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50"",
      inset && ""pl-8"",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      ""relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50"",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className=""absolute left-2 flex h-3.5 w-3.5 items-center justify-center"">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className=""h-4 w-4"" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      ""relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50"",
      className
    )}
    {...props}
  >
    <span className=""absolute left-2 flex h-3.5 w-3.5 items-center justify-center"">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className=""h-2 w-2 fill-current"" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      ""px-2 py-1.5 text-sm font-semibold text-foreground"",
      inset && ""pl-8"",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn(""-mx-1 my-1 h-px bg-border"", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        ""ml-auto text-xs tracking-widest text-muted-foreground"",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = ""ContextMenuShortcut""

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
",www\registry\default\ui\context-menu.tsx,1692,"This component library is a comprehensive implementation of a context menu using Radix UI's primitives. It provides various components for building a fully functional context menu, including support for submenus, groups, labels, separators, and different types of selectable items like checkboxes and radio buttons. Each component is styled and can be customized with additional props.","<ContextMenu>
  <ContextMenuTrigger>
    <button>Right click me</button>
  </ContextMenuTrigger>
  <ContextMenuContent>
    <ContextMenuItem>Option 1</ContextMenuItem>
    <ContextMenuItem>Option 2</ContextMenuItem>
    <ContextMenuSeparator />
    <ContextMenuLabel>Label</ContextMenuLabel>
    <ContextMenuCheckboxItem checked={true}>Checkbox Item</ContextMenuCheckboxItem>
    <ContextMenuRadioGroup value='1'>
      <ContextMenuRadioItem value='1'>Radio Item 1</ContextMenuRadioItem>
      <ContextMenuRadioItem value='2'>Radio Item 2</ContextMenuRadioItem>
    </ContextMenuRadioGroup>
  </ContextMenuContent>
</ContextMenu>","inset: boolean, className: string, children: React.ReactNode, checked: boolean, value: string","---
title: Context Menu
description: Displays a menu to the user — such as a set of actions or functions — triggered by a button.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/context-menu
  api: https://www.radix-ui.com/docs/primitives/components/context-menu#api-reference
---

<ComponentPreview name=""context-menu-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add context-menu
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-context-menu
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""context-menu"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import {
  ContextMenu,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuTrigger,
} from ""@/components/ui/context-menu""
```

```tsx
<ContextMenu>
  <ContextMenuTrigger>Right click</ContextMenuTrigger>
  <ContextMenuContent>
    <ContextMenuItem>Profile</ContextMenuItem>
    <ContextMenuItem>Billing</ContextMenuItem>
    <ContextMenuItem>Team</ContextMenuItem>
    <ContextMenuItem>Subscription</ContextMenuItem>
  </ContextMenuContent>
</ContextMenu>
```
",344.0
dialog.tsx,"""use client""

import * as React from ""react""
import * as DialogPrimitive from ""@radix-ui/react-dialog""
import { X } from ""lucide-react""

import { cn } from ""@/lib/utils""

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      ""fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0"",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        ""fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg"",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className=""absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground"">
        <X className=""h-4 w-4"" />
        <span className=""sr-only"">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      ""flex flex-col space-y-1.5 text-center sm:text-left"",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = ""DialogHeader""

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      ""flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2"",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = ""DialogFooter""

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      ""text-lg font-semibold leading-none tracking-tight"",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn(""text-sm text-muted-foreground"", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
",www\registry\default\ui\dialog.tsx,918,"This component is a customizable dialog (modal) implementation using Radix UI's Dialog primitives. It provides a series of components such as Dialog, DialogTrigger, DialogPortal, DialogOverlay, DialogContent, DialogClose, DialogHeader, DialogFooter, DialogTitle, and DialogDescription. These components work together to create a flexible and accessible dialog system. The DialogContent component, for instance, includes an overlay and content area, and it automatically handles animations for opening and closing the dialog. The DialogClose component is used within the DialogContent to provide a user-friendly way to close the dialog.",<Dialog><DialogTrigger asChild><button>Open Dialog</button></DialogTrigger><DialogContent><DialogTitle>Title</DialogTitle><DialogDescription>Description here</DialogDescription><DialogFooter><button>Cancel</button><button>Confirm</button></DialogFooter></DialogContent></Dialog>,"Dialog: no props, DialogTrigger: asChild: ReactNode, DialogPortal: no props, DialogOverlay: className: string, DialogClose: className: string, DialogContent: className: string, children: ReactNode, DialogHeader: className: string, DialogFooter: className: string, DialogTitle: className: string, DialogDescription: className: string","---
title: Dialog
description: A window overlaid on either the primary window or another dialog window, rendering the content underneath inert.
featured: true
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/dialog
  api: https://www.radix-ui.com/docs/primitives/components/dialog#api-reference
---

<ComponentPreview name=""dialog-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add dialog
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-dialog
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""dialog"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from ""@/components/ui/dialog""
```

```tsx
<Dialog>
  <DialogTrigger>Open</DialogTrigger>
  <DialogContent>
    <DialogHeader>
      <DialogTitle>Are you absolutely sure?</DialogTitle>
      <DialogDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </DialogDescription>
    </DialogHeader>
  </DialogContent>
</Dialog>
```

## Examples

### Custom close button

<ComponentPreview name=""dialog-close-button"" />

## Notes

To activate the `Dialog` component from within a `Context Menu` or `Dropdown Menu`, you must encase the `Context Menu` or
`Dropdown Menu` component in the `Dialog` component. For more information, refer to the linked issue [here](https://github.com/radix-ui/primitives/issues/1836).

```tsx {14-25}
<Dialog>
  <ContextMenu>
    <ContextMenuTrigger>Right click</ContextMenuTrigger>
    <ContextMenuContent>
      <ContextMenuItem>Open</ContextMenuItem>
      <ContextMenuItem>Download</ContextMenuItem>
      <DialogTrigger asChild>
        <ContextMenuItem>
          <span>Delete</span>
        </ContextMenuItem>
      </DialogTrigger>
    </ContextMenuContent>
  </ContextMenu>
  <DialogContent>
    <DialogHeader>
      <DialogTitle>Are you absolutely sure?</DialogTitle>
      <DialogDescription>
        This action cannot be undone. Are you sure you want to permanently
        delete this file from our servers?
      </DialogDescription>
    </DialogHeader>
    <DialogFooter>
      <Button type=""submit"">Confirm</Button>
    </DialogFooter>
  </DialogContent>
</Dialog>
```
",620.0
drawer.tsx,"""use client""

import * as React from ""react""
import { Drawer as DrawerPrimitive } from ""vaul""

import { cn } from ""@/lib/utils""

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = ""Drawer""

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn(""fixed inset-0 z-50 bg-black/80"", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        ""fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background"",
        className
      )}
      {...props}
    >
      <div className=""mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted"" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = ""DrawerContent""

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(""grid gap-1.5 p-4 text-center sm:text-left"", className)}
    {...props}
  />
)
DrawerHeader.displayName = ""DrawerHeader""

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(""mt-auto flex flex-col gap-2 p-4"", className)}
    {...props}
  />
)
DrawerFooter.displayName = ""DrawerFooter""

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      ""text-lg font-semibold leading-none tracking-tight"",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn(""text-sm text-muted-foreground"", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
",www\registry\default\ui\drawer.tsx,689,"The Drawer component is a customizable overlay panel that can slide in and out of the screen, typically used for navigation menus, cart summaries, or any content that should not always be visible. It's built on top of the 'vaul' library and provides a set of sub-components like DrawerTrigger, DrawerPortal, DrawerClose, DrawerOverlay, DrawerContent, DrawerHeader, DrawerFooter, DrawerTitle, and DrawerDescription for flexible drawer implementations. Each sub-component can be styled and customized using props.","<Drawer shouldScaleBackground={true}>
  <DrawerTrigger>Open Drawer</DrawerTrigger>
  <DrawerContent>
    <DrawerHeader>Header Content</DrawerHeader>
    <div>Drawer Main Content</div>
    <DrawerFooter>Footer Content</DrawerFooter>
  </DrawerContent>
</Drawer>",shouldScaleBackground: boolean,"---
title: Drawer
description: A drawer component for React.
component: true
links:
  doc: https://github.com/emilkowalski/vaul
---

<ComponentPreview name=""drawer-demo"" />

## About

Drawer is built on top of [Vaul](https://github.com/emilkowalski/vaul) by [emilkowalski\_](https://twitter.com/emilkowalski_).

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add drawer
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install vaul
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""drawer"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx showLineNumbers
import {
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from ""@/components/ui/drawer""
```

```tsx showLineNumbers
<Drawer>
  <DrawerTrigger>Open</DrawerTrigger>
  <DrawerContent>
    <DrawerHeader>
      <DrawerTitle>Are you absolutely sure?</DrawerTitle>
      <DrawerDescription>This action cannot be undone.</DrawerDescription>
    </DrawerHeader>
    <DrawerFooter>
      <Button>Submit</Button>
      <DrawerClose>
        <Button variant=""outline"">Cancel</Button>
      </DrawerClose>
    </DrawerFooter>
  </DrawerContent>
</Drawer>
```

## Examples

### Responsive Dialog

You can combine the `Dialog` and `Drawer` components to create a responsive dialog. This renders a `Dialog` component on desktop and a `Drawer` on mobile.

<ComponentPreview name=""drawer-dialog"" />
",446.0
dropdown-menu.tsx,"""use client""

import * as React from ""react""
import * as DropdownMenuPrimitive from ""@radix-ui/react-dropdown-menu""
import { Check, ChevronRight, Circle } from ""lucide-react""

import { cn } from ""@/lib/utils""

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      ""flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent"",
      inset && ""pl-8"",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className=""ml-auto h-4 w-4"" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      ""z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2"",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        ""z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2"",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      ""relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50"",
      inset && ""pl-8"",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      ""relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50"",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className=""absolute left-2 flex h-3.5 w-3.5 items-center justify-center"">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className=""h-4 w-4"" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      ""relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50"",
      className
    )}
    {...props}
  >
    <span className=""absolute left-2 flex h-3.5 w-3.5 items-center justify-center"">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className=""h-2 w-2 fill-current"" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      ""px-2 py-1.5 text-sm font-semibold"",
      inset && ""pl-8"",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn(""-mx-1 my-1 h-px bg-muted"", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(""ml-auto text-xs tracking-widest opacity-60"", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = ""DropdownMenuShortcut""

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
",www\registry\default\ui\dropdown-menu.tsx,1711,"A comprehensive DropdownMenu component built with Radix UI primitives, providing a flexible and accessible dropdown menu solution. It includes various sub-components like triggers, items, groups, and more, allowing for complex dropdown menu structures with checkboxes, radio items, labels, separators, and shortcuts. The component supports nesting, keyboard interactions, and is styled for a consistent look and feel.","<DropdownMenu>
  <DropdownMenuTrigger>Open</DropdownMenuTrigger>
  <DropdownMenuContent>
    <DropdownMenuItem>Item 1</DropdownMenuItem>
    <DropdownMenuItem>Item 2</DropdownMenuItem>
    <DropdownMenuSeparator />
    <DropdownMenuLabel>Label</DropdownMenuLabel>
    <DropdownMenuCheckboxItem checked={true}>Checkbox Item</DropdownMenuCheckboxItem>
    <DropdownMenuRadioGroup>
      <DropdownMenuRadioItem value='radio1'>Radio Item 1</DropdownMenuRadioItem>
    </DropdownMenuRadioGroup>
  </DropdownMenuContent>
</DropdownMenu>","DropdownMenu: -, DropdownMenuTrigger: -, DropdownMenuGroup: -, DropdownMenuPortal: -, DropdownMenuSub: -, DropdownMenuRadioGroup: -, DropdownMenuSubTrigger: {inset?: boolean}, DropdownMenuSubContent: {className?: string, sideOffset?: number}, DropdownMenuContent: {className?: string, sideOffset?: number}, DropdownMenuItem: {inset?: boolean}, DropdownMenuCheckboxItem: {checked: boolean}, DropdownMenuRadioItem: -, DropdownMenuLabel: {inset?: boolean}, DropdownMenuSeparator: -, DropdownMenuShortcut: -","---
title: Dropdown Menu
description: Displays a menu to the user — such as a set of actions or functions — triggered by a button.
featured: true
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/dropdown-menu
  api: https://www.radix-ui.com/docs/primitives/components/dropdown-menu#api-reference
---

<ComponentPreview name=""dropdown-menu-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add dropdown-menu
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-dropdown-menu
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""dropdown-menu"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from ""@/components/ui/dropdown-menu""
```

```tsx
<DropdownMenu>
  <DropdownMenuTrigger>Open</DropdownMenuTrigger>
  <DropdownMenuContent>
    <DropdownMenuLabel>My Account</DropdownMenuLabel>
    <DropdownMenuSeparator />
    <DropdownMenuItem>Profile</DropdownMenuItem>
    <DropdownMenuItem>Billing</DropdownMenuItem>
    <DropdownMenuItem>Team</DropdownMenuItem>
    <DropdownMenuItem>Subscription</DropdownMenuItem>
  </DropdownMenuContent>
</DropdownMenu>
```

## Examples

### Checkboxes

<ComponentPreview name=""dropdown-menu-checkboxes"" />

### Radio Group

<ComponentPreview name=""dropdown-menu-radio-group"" />
",416.0
form.tsx,"import * as React from ""react""
import * as LabelPrimitive from ""@radix-ui/react-label""
import { Slot } from ""@radix-ui/react-slot""
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from ""react-hook-form""

import { cn } from ""@/lib/utils""
import { Label } from ""@/registry/default/ui/label""

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error(""useFormField should be used within <FormField>"")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn(""space-y-2"", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = ""FormItem""

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && ""text-destructive"", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = ""FormLabel""

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = ""FormControl""

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn(""text-sm text-muted-foreground"", className)}
      {...props}
    />
  )
})
FormDescription.displayName = ""FormDescription""

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn(""text-sm font-medium text-destructive"", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = ""FormMessage""

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
",www\registry\default\ui\form.tsx,984,"This component library provides a flexible and context-driven approach for building forms using React. It leverages `react-hook-form` for form state management and Radix UI for accessibility primitives. The library includes components for form fields, labels, controls, descriptions, and messages, each designed to work within a form's context to easily manage form state, validation, and accessibility features.","<Form>
  <FormItem>
    <FormLabel>Username</FormLabel>
    <FormControl as='input' name='username' />
    <FormDescription>Description for username</FormDescription>
    <FormMessage>This field is required</FormMessage>
  </FormItem>
</Form>","Form: FormProviderProps from react-hook-form, FormField: ControllerProps<TFieldValues, TName>, FormItem: React.HTMLAttributes<HTMLDivElement>, FormLabel: React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>, FormControl: React.ComponentPropsWithoutRef<typeof Slot>, FormDescription: React.HTMLAttributes<HTMLParagraphElement>, FormMessage: React.HTMLAttributes<HTMLParagraphElement>","---
title: React Hook Form
description: Building forms with React Hook Form and Zod.
links:
  doc: https://react-hook-form.com
---

Forms are tricky. They are one of the most common things you'll build in a web application, but also one of the most complex.

Well-designed HTML forms are:

- Well-structured and semantically correct.
- Easy to use and navigate (keyboard).
- Accessible with ARIA attributes and proper labels.
- Has support for client and server side validation.
- Well-styled and consistent with the rest of the application.

In this guide, we will take a look at building forms with [`react-hook-form`](https://react-hook-form.com/) and [`zod`](https://zod.dev). We're going to use a `<FormField>` component to compose accessible forms using Radix UI components.

## Features

The `<Form />` component is a wrapper around the `react-hook-form` library. It provides a few things:

- Composable components for building forms.
- A `<FormField />` component for building controlled form fields.
- Form validation using `zod`.
- Handles accessibility and error messages.
- Uses `React.useId()` for generating unique IDs.
- Applies the correct `aria` attributes to form fields based on states.
- Built to work with all Radix UI components.
- Bring your own schema library. We use `zod` but you can use anything you want.
- **You have full control over the markup and styling.**

## Anatomy

```tsx
<Form>
  <FormField
    control={...}
    name=""...""
    render={() => (
      <FormItem>
        <FormLabel />
        <FormControl>
          { /* Your form field */}
        </FormControl>
        <FormDescription />
        <FormMessage />
      </FormItem>
    )}
  />
</Form>
```

## Example

```tsx
const form = useForm()

<FormField
  control={form.control}
  name=""username""
  render={({ field }) => (
    <FormItem>
      <FormLabel>Username</FormLabel>
      <FormControl>
        <Input placeholder=""shadcn"" {...field} />
      </FormControl>
      <FormDescription>This is your public display name.</FormDescription>
      <FormMessage />
    </FormItem>
  )}
/>
```

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

<Steps>

### Command

```bash
npx shadcn-ui@latest add form
```

</Steps>

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-label @radix-ui/react-slot react-hook-form @hookform/resolvers zod
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""form"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

<Steps>

### Create a form schema

Define the shape of your form using a Zod schema. You can read more about using Zod in the [Zod documentation](https://zod.dev).

```tsx showLineNumbers {3,5-7}
""use client""

import { z } from ""zod""

const formSchema = z.object({
  username: z.string().min(2).max(50),
})
```

### Define a form

Use the `useForm` hook from `react-hook-form` to create a form.

```tsx showLineNumbers {3-4,14-20,22-27}
""use client""

import { zodResolver } from ""@hookform/resolvers/zod""
import { useForm } from ""react-hook-form""
import { z } from ""zod""

const formSchema = z.object({
  username: z.string().min(2, {
    message: ""Username must be at least 2 characters."",
  }),
})

export function ProfileForm() {
  // 1. Define your form.
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: """",
    },
  })

  // 2. Define a submit handler.
  function onSubmit(values: z.infer<typeof formSchema>) {
    // Do something with the form values.
    // ✅ This will be type-safe and validated.
    console.log(values)
  }
}
```

Since `FormField` is using a controlled component, you need to provide a default value for the field. See the [React Hook Form docs](https://react-hook-form.com/docs/usecontroller) to learn more about controlled components.

### Build your form

We can now use the `<Form />` components to build our form.

```tsx showLineNumbers {7-17,28-50}
""use client""

import { zodResolver } from ""@hookform/resolvers/zod""
import { useForm } from ""react-hook-form""
import { z } from ""zod""

import { Button } from ""@/components/ui/button""
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from ""@/components/ui/form""
import { Input } from ""@/components/ui/input""

const formSchema = z.object({
  username: z.string().min(2, {
    message: ""Username must be at least 2 characters."",
  }),
})

export function ProfileForm() {
  // ...

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className=""space-y-8"">
        <FormField
          control={form.control}
          name=""username""
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username</FormLabel>
              <FormControl>
                <Input placeholder=""shadcn"" {...field} />
              </FormControl>
              <FormDescription>
                This is your public display name.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type=""submit"">Submit</Button>
      </form>
    </Form>
  )
}
```

### Done

That's it. You now have a fully accessible form that is type-safe with client-side validation.

<ComponentPreview
  name=""input-form""
  className=""[&_[role=tablist]]:hidden [&>div>div:first-child]:hidden""
/>

</Steps>

## Examples

See the following links for more examples on how to use the `<Form />` component with other components:

- [Checkbox](/docs/components/checkbox#form)
- [Date Picker](/docs/components/date-picker#form)
- [Input](/docs/components/input#form)
- [Radio Group](/docs/components/radio-group#form)
- [Select](/docs/components/select#form)
- [Switch](/docs/components/switch#form)
- [Textarea](/docs/components/textarea#form)
- [Combobox](/docs/components/combobox#form)
",1497.0
hover-card.tsx,"""use client""

import * as React from ""react""
import * as HoverCardPrimitive from ""@radix-ui/react-hover-card""

import { cn } from ""@/lib/utils""

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = ""center"", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      ""z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2"",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
",www\registry\default\ui\hover-card.tsx,297,"The HoverCard component is a part of the @radix-ui/react-hover-card library, designed to display additional information (like a tooltip) when a user hovers over a trigger element. It consists of three main parts: HoverCard (the root component), HoverCardTrigger (the element that triggers the hover card on hover), and HoverCardContent (the content that is displayed within the hover card). The HoverCardContent is customizable with several props such as alignment, side offset, and additional CSS classes for styling.","<HoverCard>
  <HoverCardTrigger>Hover over me</HoverCardTrigger>
  <HoverCardContent className='example-class' align='start' sideOffset={10}>
    Content goes here
  </HoverCardContent>
</HoverCard>","className: string, align: 'start' | 'center' | 'end', sideOffset: number","---
title: Hover Card
description: For sighted users to preview content available behind a link.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/hover-card
  api: https://www.radix-ui.com/docs/primitives/components/hover-card#api-reference
---

<ComponentPreview name=""hover-card-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add hover-card
```

</TabsContent>

<TabsContent value=""manual"">

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-hover-card
```

<Steps>

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""hover-card"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from ""@/components/ui/hover-card""
```

```tsx
<HoverCard>
  <HoverCardTrigger>Hover</HoverCardTrigger>
  <HoverCardContent>
    The React Framework – created and maintained by @vercel.
  </HoverCardContent>
</HoverCard>
```
",309.0
input.tsx,"import * as React from ""react""

import { cn } from ""@/lib/utils""

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          ""flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = ""Input""

export { Input }
",www\registry\default\ui\input.tsx,183,"This component is a styled input field, extending HTML input attributes for customization. It's designed with flexibility in mind, allowing for various styles and uses through props. The styling focuses on a modern, rounded appearance with customizable border, background, and text styles. It supports disabled state styling and has focus-visible enhancements for accessibility.",<Input className='custom-class' type='text' placeholder='Enter your text here' disabled={false} />,"className: string, type: string, disabled: boolean, placeholder: string, ...props","---
title: Input
description: Displays a form input field or a component that looks like an input field.
component: true
---

<ComponentPreview name=""input-demo"" className=""[&_input]:max-w-xs"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add input
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""input"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { Input } from ""@/components/ui/input""
```

```tsx
<Input />
```

## Examples

### Default

<ComponentPreview name=""input-demo"" className=""[&_input]:max-w-xs"" />

### File

<ComponentPreview name=""input-file"" className=""[&_input]:max-w-xs"" />

### Disabled

<ComponentPreview name=""input-disabled"" className=""[&_input]:max-w-xs"" />

### With Label

<ComponentPreview name=""input-with-label"" className=""[&_input]:max-w-xs"" />

### With Button

<ComponentPreview name=""input-with-button"" className=""[&_input]:max-w-xs"" />

### Form

<ComponentPreview name=""input-form"" />
",314.0
label.tsx,"""use client""

import * as React from ""react""
import * as LabelPrimitive from ""@radix-ui/react-label""
import { cva, type VariantProps } from ""class-variance-authority""

import { cn } from ""@/lib/utils""

const labelVariants = cva(
  ""text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70""
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
",www\registry\default\ui\label.tsx,168,"The Label component is a wrapper around the @radix-ui/react-label primitive with additional styling capabilities. It utilizes the class-variance-authority (cva) for managing its variants and allows for extending the base styles. This component is designed to be used in forms or anywhere a label is required, providing built-in support for accessibility features such as associating the label with its input field.",<Label htmlFor='input-id' className='custom-class'>Your Label</Label>,"className: string, htmlFor: string, children: React.ReactNode","---
title: Label
description: Renders an accessible label associated with controls.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/label
  api: https://www.radix-ui.com/docs/primitives/components/label#api-reference
---

<ComponentPreview name=""label-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add label
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-label
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""label"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { Label } from ""@/components/ui/label""
```

```tsx
<Label htmlFor=""email"">Your email address</Label>
```
",254.0
menubar.tsx,"""use client""

import * as React from ""react""
import * as MenubarPrimitive from ""@radix-ui/react-menubar""
import { Check, ChevronRight, Circle } from ""lucide-react""

import { cn } from ""@/lib/utils""

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      ""flex h-10 items-center space-x-1 rounded-md border bg-background p-1"",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      ""flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground"",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      ""flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground"",
      inset && ""pl-8"",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className=""ml-auto h-4 w-4"" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      ""z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2"",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = ""start"", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          ""z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2"",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      ""relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50"",
      inset && ""pl-8"",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      ""relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50"",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className=""absolute left-2 flex h-3.5 w-3.5 items-center justify-center"">
      <MenubarPrimitive.ItemIndicator>
        <Check className=""h-4 w-4"" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      ""relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50"",
      className
    )}
    {...props}
  >
    <span className=""absolute left-2 flex h-3.5 w-3.5 items-center justify-center"">
      <MenubarPrimitive.ItemIndicator>
        <Circle className=""h-2 w-2 fill-current"" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      ""px-2 py-1.5 text-sm font-semibold"",
      inset && ""pl-8"",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn(""-mx-1 my-1 h-px bg-muted"", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        ""ml-auto text-xs tracking-widest text-muted-foreground"",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = ""MenubarShortcut""

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
",www\registry\default\ui\menubar.tsx,1982,"The menubar.tsx component is a comprehensive implementation of a menu bar using Radix UI primitives, tailored for accessibility and customization. It supports various menu items including groups, submenus, checkboxes, radio items, and more. It also handles focus management and keyboard interactions out of the box. The component is styled with utility classes for a flexible and customizable appearance.","<Menubar>
  <MenubarTrigger>Menu</MenubarTrigger>
  <MenubarContent>
    <MenubarItem>Item 1</MenubarItem>
    <MenubarSeparator />
    <MenubarLabel>Label</MenubarLabel>
    <MenubarItem>Item 2</MenubarItem>
    <MenubarSub>
      <MenubarSubTrigger>Submenu</MenubarSubTrigger>
      <MenubarSubContent>
        <MenubarItem>Sub Item 1</MenubarItem>
      </MenubarSubContent>
    </MenubarSub>
    <MenubarCheckboxItem checked={true}>Checkbox Item</MenubarCheckboxItem>
    <MenubarRadioGroup value='1'>
      <MenubarRadioItem value='1'>Radio Item 1</MenubarRadioItem>
    </MenubarRadioGroup>
  </MenubarContent>
</Menubar>","className: string, inset: boolean, children: ReactNode, align: 'start' | 'end', alignOffset: number, sideOffset: number, checked: boolean, value: string","---
title: Menubar
description: A visually persistent menu common in desktop applications that provides quick access to a consistent set of commands.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/menubar
  api: https://www.radix-ui.com/docs/primitives/components/menubar#api-reference
---

<ComponentPreview name=""menubar-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add menubar
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-menubar
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""menubar"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import {
  Menubar,
  MenubarContent,
  MenubarItem,
  MenubarMenu,
  MenubarSeparator,
  MenubarShortcut,
  MenubarTrigger,
} from ""@/components/ui/menubar""
```

```tsx
<Menubar>
  <MenubarMenu>
    <MenubarTrigger>File</MenubarTrigger>
    <MenubarContent>
      <MenubarItem>
        New Tab <MenubarShortcut>⌘T</MenubarShortcut>
      </MenubarItem>
      <MenubarItem>New Window</MenubarItem>
      <MenubarSeparator />
      <MenubarItem>Share</MenubarItem>
      <MenubarSeparator />
      <MenubarItem>Print</MenubarItem>
    </MenubarContent>
  </MenubarMenu>
</Menubar>
```
",415.0
navigation-menu.tsx,"import * as React from ""react""
import * as NavigationMenuPrimitive from ""@radix-ui/react-navigation-menu""
import { cva } from ""class-variance-authority""
import { ChevronDown } from ""lucide-react""

import { cn } from ""@/lib/utils""

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      ""relative z-10 flex max-w-max flex-1 items-center justify-center"",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      ""group flex flex-1 list-none items-center justify-center space-x-1"",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  ""group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50""
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), ""group"", className)}
    {...props}
  >
    {children}{"" ""}
    <ChevronDown
      className=""relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180""
      aria-hidden=""true""
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      ""left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto "",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn(""absolute left-0 top-full flex justify-center"")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        ""origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]"",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      ""top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in"",
      className
    )}
    {...props}
  >
    <div className=""relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md"" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
",www\registry\default\ui\navigation-menu.tsx,1152,"A comprehensive component for rendering a navigation menu using Radix UI primitives with additional styling and utilities. It supports a variety of elements including a navigation menu root, list, item, trigger, content, link, viewport, and indicator, each with customizable classes and properties for enhanced flexibility.","<NavigationMenu className='customClass'>
  <NavigationMenuList>
    <NavigationMenuItem>
      <NavigationMenuTrigger>Menu Item 1<ChevronDown /></NavigationMenuTrigger>
      <NavigationMenuContent>Content 1</NavigationMenuContent>
    </NavigationMenuItem>
    <NavigationMenuItem>
      <NavigationMenuTrigger>Menu Item 2<ChevronDown /></NavigationMenuTrigger>
      <NavigationMenuContent>Content 2</NavigationMenuContent>
    </NavigationMenuItem>
  </NavigationMenuList>
</NavigationMenu>","className: string, children: React.ReactNode, ...props: various","---
title: Navigation Menu
description: A collection of links for navigating websites.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/navigation-menu
  api: https://www.radix-ui.com/docs/primitives/components/navigation-menu#api-reference
---

<ComponentPreview name=""navigation-menu-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add navigation-menu
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-navigation-menu
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""navigation-menu"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuIndicator,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
  NavigationMenuViewport,
} from ""@/components/ui/navigation-menu""
```

```tsx
<NavigationMenu>
  <NavigationMenuList>
    <NavigationMenuItem>
      <NavigationMenuTrigger>Item One</NavigationMenuTrigger>
      <NavigationMenuContent>
        <NavigationMenuLink>Link</NavigationMenuLink>
      </NavigationMenuContent>
    </NavigationMenuItem>
  </NavigationMenuList>
</NavigationMenu>
```

## Examples

### Link Component

When using the Next.js `<Link />` component, you can use `navigationMenuTriggerStyle()` to apply the correct styles to the trigger.

```tsx
import { navigationMenuTriggerStyle } from ""@/components/ui/navigation-menu""
```

```tsx {3-5}
<NavigationMenuItem>
  <Link href=""/docs"" legacyBehavior passHref>
    <NavigationMenuLink className={navigationMenuTriggerStyle()}>
      Documentation
    </NavigationMenuLink>
  </Link>
</NavigationMenuItem>
```

See also the [Radix UI documentation](https://www.radix-ui.com/docs/primitives/components/navigation-menu#with-client-side-routing) for handling client side routing.
",494.0
pagination.tsx,"import * as React from ""react""
import { ChevronLeft, ChevronRight, MoreHorizontal } from ""lucide-react""

import { cn } from ""@/lib/utils""
import { ButtonProps, buttonVariants } from ""@/registry/default/ui/button""

const Pagination = ({ className, ...props }: React.ComponentProps<""nav"">) => (
  <nav
    role=""navigation""
    aria-label=""pagination""
    className={cn(""mx-auto flex w-full justify-center"", className)}
    {...props}
  />
)
Pagination.displayName = ""Pagination""

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<""ul"">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn(""flex flex-row items-center gap-1"", className)}
    {...props}
  />
))
PaginationContent.displayName = ""PaginationContent""

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<""li"">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("""", className)} {...props} />
))
PaginationItem.displayName = ""PaginationItem""

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, ""size""> &
  React.ComponentProps<""a"">

const PaginationLink = ({
  className,
  isActive,
  size = ""icon"",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? ""page"" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? ""outline"" : ""ghost"",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = ""PaginationLink""

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label=""Go to previous page""
    size=""default""
    className={cn(""gap-1 pl-2.5"", className)}
    {...props}
  >
    <ChevronLeft className=""h-4 w-4"" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = ""PaginationPrevious""

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label=""Go to next page""
    size=""default""
    className={cn(""gap-1 pr-2.5"", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className=""h-4 w-4"" />
  </PaginationLink>
)
PaginationNext.displayName = ""PaginationNext""

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<""span"">) => (
  <span
    aria-hidden
    className={cn(""flex h-9 w-9 items-center justify-center"", className)}
    {...props}
  >
    <MoreHorizontal className=""h-4 w-4"" />
    <span className=""sr-only"">More pages</span>
  </span>
)
PaginationEllipsis.displayName = ""PaginationEllipsis""

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}
",www\registry\default\ui\pagination.tsx,689,"The component suite includes a Pagination wrapper, content container, individual item, link, previous button, next button, and an ellipsis indicator for additional pages. It is designed to provide a flexible and accessible way to handle pagination in React applications.","<Pagination>
  <PaginationContent>
    <PaginationPrevious href='#' />
    <PaginationItem><PaginationLink href='#' isActive>1</PaginationLink></PaginationItem>
    <PaginationItem><PaginationLink href='#'>2</PaginationLink></PaginationItem>
    <PaginationEllipsis />
    <PaginationNext href='#' />
  </PaginationContent>
</Pagination>","Pagination: className, ...props; PaginationContent: className, ...props; PaginationItem: className, ...props; PaginationLink: className, isActive, size, ...props; PaginationPrevious: className, ...props; PaginationNext: className, ...props; PaginationEllipsis: className, ...props","---
title: Pagination
description: Pagination with page navigation, next and previous links.
component: true
---

<ComponentPreview name=""pagination-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add pagination
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""pagination"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from ""@/components/ui/pagination""
```

```tsx
<Pagination>
  <PaginationContent>
    <PaginationItem>
      <PaginationPrevious href=""#"" />
    </PaginationItem>
    <PaginationItem>
      <PaginationLink href=""#"">1</PaginationLink>
    </PaginationItem>
    <PaginationItem>
      <PaginationEllipsis />
    </PaginationItem>
    <PaginationItem>
      <PaginationNext href=""#"" />
    </PaginationItem>
  </PaginationContent>
</Pagination>
```

### Next.js

By default the `<PaginationLink />` component will render an `<a />` tag.

To use the Next.js `<Link />` component, make the following updates to `pagination.tsx`.

```diff showLineNumbers /typeof Link/ {1}
+ import Link from ""next/link""

- type PaginationLinkProps = ... & React.ComponentProps<""a"">
+ type PaginationLinkProps = ... & React.ComponentProps<typeof Link>

const PaginationLink = ({...props }: ) => (
  <PaginationItem>
-   <a>
+   <Link>
      // ...
-   </a>
+   </Link>
  </PaginationItem>
)

```

<Callout className=""mt-6"">

**Note:** We are making updates to the cli to automatically do this for you.

</Callout>
",463.0
popover.tsx,"""use client""

import * as React from ""react""
import * as PopoverPrimitive from ""@radix-ui/react-popover""

import { cn } from ""@/lib/utils""

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = ""center"", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        ""z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2"",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
",www\registry\default\ui\popover.tsx,312,"This component is a custom implementation of a popover using @radix-ui/react-popover. It consists of three main parts: Popover (the root container), PopoverTrigger (the element that triggers the popover), and PopoverContent (the content of the popover). PopoverContent is styled and positioned with default props for alignment and side offset, and it supports animation for opening and closing states.",<Popover><PopoverTrigger asChild><button className='btn'>Open</button></PopoverTrigger><PopoverContent className='custom-class' align='start' sideOffset={10}>Popover Content</PopoverContent></Popover>,"className: string, align: 'start' | 'center' | 'end', sideOffset: number","---
title: Popover
description: Displays rich content in a portal, triggered by a button.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/popover
  api: https://www.radix-ui.com/docs/primitives/components/popover#api-reference
---

<ComponentPreview name=""popover-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add popover
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-popover
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""popover"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from ""@/components/ui/popover""
```

```tsx
<Popover>
  <PopoverTrigger>Open</PopoverTrigger>
  <PopoverContent>Place content for the popover here.</PopoverContent>
</Popover>
```
",292.0
progress.tsx,"""use client""

import * as React from ""react""
import * as ProgressPrimitive from ""@radix-ui/react-progress""

import { cn } from ""@/lib/utils""

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      ""relative h-4 w-full overflow-hidden rounded-full bg-secondary"",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className=""h-full w-full flex-1 bg-primary transition-all""
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
",www\registry\default\ui\progress.tsx,179,The Progress component is built using React and the @radix-ui/react-progress library. It is designed to visually represent the progress of a task or operation. It includes a customizable progress bar that can be styled via className and its progress can be controlled through the value prop. The component is wrapped in a forwardRef to handle ref forwarding and uses the cn function from '@/lib/utils' for conditional className concatenation.,<Progress value={50} className='my-custom-class' />,"className: string, value: number","---
title: Progress
description: Displays an indicator showing the completion progress of a task, typically displayed as a progress bar.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/progress
  api: https://www.radix-ui.com/docs/primitives/components/progress#api-reference
---

<ComponentPreview name=""progress-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add progress
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-progress
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""progress"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { Progress } from ""@/components/ui/progress""
```

```tsx
<Progress value={33} />
```
",259.0
radio-group.tsx,"""use client""

import * as React from ""react""
import * as RadioGroupPrimitive from ""@radix-ui/react-radio-group""
import { Circle } from ""lucide-react""

import { cn } from ""@/lib/utils""

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn(""grid gap-2"", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        ""aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className=""flex items-center justify-center"">
        <Circle className=""h-2.5 w-2.5 fill-current text-current"" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
",www\registry\default\ui\radio-group.tsx,334,"A customizable RadioGroup component built with Radix UI's RadioGroupPrimitive, providing an accessible and flexible way to implement radio groups in a React project. It includes both a RadioGroup container for managing radio group state and a RadioGroupItem for individual radio options, with support for custom styling.","<RadioGroup defaultValue='1' aria-label='Radio Group'>
  <RadioGroupItem value='1' id='radio-1' className='custom-class'>Option 1</RadioGroupItem>
  <RadioGroupItem value='2' id='radio-2'>Option 2</RadioGroupItem>
  <RadioGroupItem value='3' id='radio-3' disabled>Option 3</RadioGroupItem>
</RadioGroup>","RadioGroup: className: string, ...props: React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>; RadioGroupItem: className: string, ...props: React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>","---
title: Radio Group
description: A set of checkable buttons—known as radio buttons—where no more than one of the buttons can be checked at a time.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/radio-group
  api: https://www.radix-ui.com/docs/primitives/components/radio-group#api-reference
---

<ComponentPreview name=""radio-group-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add radio-group
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-radio-group
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""radio-group"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { Label } from ""@/components/ui/label""
import { RadioGroup, RadioGroupItem } from ""@/components/ui/radio-group""
```

```tsx
<RadioGroup defaultValue=""option-one"">
  <div className=""flex items-center space-x-2"">
    <RadioGroupItem value=""option-one"" id=""option-one"" />
    <Label htmlFor=""option-one"">Option One</Label>
  </div>
  <div className=""flex items-center space-x-2"">
    <RadioGroupItem value=""option-two"" id=""option-two"" />
    <Label htmlFor=""option-two"">Option Two</Label>
  </div>
</RadioGroup>
```

## Examples

### Form

<ComponentPreview name=""radio-group-form"" />
",404.0
resizable.tsx,"""use client""

import { GripVertical } from ""lucide-react""
import * as ResizablePrimitive from ""react-resizable-panels""

import { cn } from ""@/lib/utils""

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      ""flex h-full w-full data-[panel-group-direction=vertical]:flex-col"",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      ""relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90"",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className=""z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border"">
        <GripVertical className=""h-2.5 w-2.5"" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
",www\registry\default\ui\resizable.tsx,425,"Provides components for creating resizable panels. It wraps the 'react-resizable-panels' library, offering a more convenient and styled way to integrate resizable panels into a React application. The components include ResizablePanelGroup for grouping panels, ResizablePanel for individual panels, and ResizableHandle for the resize handle with optional grip icon.","<ResizablePanelGroup className='custom-class-name'>
  <ResizablePanel minSize={100}>
    Panel Content
  </ResizablePanel>
  <ResizableHandle withHandle={true} />
  <ResizablePanel minSize={150}>
    Another Panel Content
  </ResizablePanel>
</ResizablePanelGroup>","ResizablePanelGroup: className: string, ...props: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>, ResizablePanel: ...props: React.ComponentProps<typeof ResizablePrimitive.Panel>, ResizableHandle: withHandle?: boolean, className: string, ...props: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle>","---
title: Resizable
description: Accessible resizable panel groups and layouts with keyboard support.
component: true
links:
  doc: https://github.com/bvaughn/react-resizable-panels
  api: https://github.com/bvaughn/react-resizable-panels/tree/main/packages/react-resizable-panels
---

<ComponentPreview name=""resizable-demo"" />

## About

The `Resizable` component is built on top of [react-resizable-panels](https://github.com/bvaughn/react-resizable-panels) by [bvaughn](https://github.com/bvaughn).

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add resizable
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install react-resizable-panels
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""resizable"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from ""@/components/ui/resizable""
```

```tsx
<ResizablePanelGroup direction=""horizontal"">
  <ResizablePanel>One</ResizablePanel>
  <ResizableHandle />
  <ResizablePanel>Two</ResizablePanel>
</ResizablePanelGroup>
```

## Examples

### Vertical

Use the `direction` prop to set the direction of the resizable panels.

<ComponentPreview name=""resizable-vertical"" />

```tsx showLineNumbers {9}
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from ""@/components/ui/resizable""

export default function Example() {
  return (
    <ResizablePanelGroup direction=""vertical"">
      <ResizablePanel>One</ResizablePanel>
      <ResizableHandle />
      <ResizablePanel>Two</ResizablePanel>
    </ResizablePanelGroup>
  )
}
```

### Handle

You can set or hide the handle by using the `withHandle` prop on the `ResizableHandle` component.

<ComponentPreview name=""resizable-handle"" />

```tsx showLineNumbers {11}
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from ""@/components/ui/resizable""

export default function Example() {
  return (
    <ResizablePanelGroup direction=""horizontal"">
      <ResizablePanel>One</ResizablePanel>
      <ResizableHandle withHandle />
      <ResizablePanel>Two</ResizablePanel>
    </ResizablePanelGroup>
  )
}
```
",598.0
scroll-area.tsx,"""use client""

import * as React from ""react""
import * as ScrollAreaPrimitive from ""@radix-ui/react-scroll-area""

import { cn } from ""@/lib/utils""

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn(""relative overflow-hidden"", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className=""h-full w-full rounded-[inherit]"">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = ""vertical"", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      ""flex touch-none select-none transition-colors"",
      orientation === ""vertical"" &&
        ""h-full w-2.5 border-l border-l-transparent p-[1px]"",
      orientation === ""horizontal"" &&
        ""h-2.5 flex-col border-t border-t-transparent p-[1px]"",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className=""relative flex-1 rounded-full bg-border"" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
",www\registry\default\ui\scroll-area.tsx,364,"The ScrollArea component is a wrapper around the @radix-ui/react-scroll-area primitives, providing a customizable scrollable area in your React application. It encapsulates the Root, Viewport, Scrollbar, and Corner components from Radix UI, offering a simplified API for ease of use. The component is designed to be flexible, allowing for both vertical and horizontal scrolling with customizable styling.",<ScrollArea className='custom-scroll-area' onScroll={() => console.log('Scrolling...')}>\n  <div>Your scrollable content here</div>\n</ScrollArea>,"className: string, children: React.ReactNode, orientation: 'vertical' | 'horizontal'","---
title: Scroll-area
description: Augments native scroll functionality for custom, cross-browser styling.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/scroll-area
  api: https://www.radix-ui.com/docs/primitives/components/scroll-area#api-reference
---

<ComponentPreview name=""scroll-area-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add scroll-area
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-scroll-area
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""scroll-area"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { ScrollArea } from ""@/components/ui/scroll-area""
```

```tsx
<ScrollArea className=""h-[200px] w-[350px] rounded-md border p-4"">
  Jokester began sneaking into the castle in the middle of the night and leaving
  jokes all over the place: under the king's pillow, in his soup, even in the
  royal toilet. The king was furious, but he couldn't seem to stop Jokester. And
  then, one day, the people of the kingdom discovered that the jokes left by
  Jokester were so funny that they couldn't help but laugh. And once they
  started laughing, they couldn't stop.
</ScrollArea>
```

## Examples

### Horizontal Scrolling

<ComponentPreview name=""scroll-area-horizontal-demo"" />
",407.0
select.tsx,"""use client""

import * as React from ""react""
import * as SelectPrimitive from ""@radix-ui/react-select""
import { Check, ChevronDown, ChevronUp } from ""lucide-react""

import { cn } from ""@/lib/utils""

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      ""flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1"",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className=""h-4 w-4 opacity-50"" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      ""flex cursor-default items-center justify-center py-1"",
      className
    )}
    {...props}
  >
    <ChevronUp className=""h-4 w-4"" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      ""flex cursor-default items-center justify-center py-1"",
      className
    )}
    {...props}
  >
    <ChevronDown className=""h-4 w-4"" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = ""popper"", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        ""relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2"",
        position === ""popper"" &&
          ""data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1"",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          ""p-1"",
          position === ""popper"" &&
            ""h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]""
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn(""py-1.5 pl-8 pr-2 text-sm font-semibold"", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      ""relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50"",
      className
    )}
    {...props}
  >
    <span className=""absolute left-2 flex h-3.5 w-3.5 items-center justify-center"">
      <SelectPrimitive.ItemIndicator>
        <Check className=""h-4 w-4"" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn(""-mx-1 my-1 h-px bg-muted"", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
",www\registry\default\ui\select.tsx,1328,"This component is a customizable select input built with Radix UI primitives and styled using Tailwind CSS. It allows for complex select input scenarios, including grouped options, custom option rendering, and custom trigger styles. It leverages Radix UI's accessibility features and Tailwind CSS for styling, providing a highly customizable select component.","<Select>
  <SelectTrigger aria-label='Select'>
    <SelectValue placeholder='Select an option' />
  </SelectTrigger>
  <SelectContent>
    <SelectGroup>
      <SelectLabel>Group Label</SelectLabel>
      <SelectItem value='option1'>Option 1</SelectItem>
      <SelectItem value='option2'>Option 2</SelectItem>
    </SelectGroup>
    <SelectSeparator />
    <SelectItem value='option3'>Option 3</SelectItem>
  </SelectContent>
</Select>","SelectTrigger: className, children, ...props, SelectScrollUpButton: className, ...props, SelectScrollDownButton: className, ...props, SelectContent: className, children, position, ...props, SelectLabel: className, ...props, SelectItem: className, children, ...props, SelectSeparator: className, ...props","---
title: Select
description: Displays a list of options for the user to pick from—triggered by a button.
component: true
featured: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/select
  api: https://www.radix-ui.com/docs/primitives/components/select#api-reference
---

<ComponentPreview name=""select-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add select
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-select
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""select"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from ""@/components/ui/select""
```

```tsx
<Select>
  <SelectTrigger className=""w-[180px]"">
    <SelectValue placeholder=""Theme"" />
  </SelectTrigger>
  <SelectContent>
    <SelectItem value=""light"">Light</SelectItem>
    <SelectItem value=""dark"">Dark</SelectItem>
    <SelectItem value=""system"">System</SelectItem>
  </SelectContent>
</Select>
```

## Examples

### Scrollable

<ComponentPreview name=""select-scrollable"" />

### Form

<ComponentPreview name=""select-form"" />
",378.0
separator.tsx,"""use client""

import * as React from ""react""
import * as SeparatorPrimitive from ""@radix-ui/react-separator""

import { cn } from ""@/lib/utils""

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = ""horizontal"", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        ""shrink-0 bg-border"",
        orientation === ""horizontal"" ? ""h-[1px] w-full"" : ""h-full w-[1px]"",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
",www\registry\default\ui\separator.tsx,174,"The 'Separator' component is a utility component built on top of '@radix-ui/react-separator'. It is used to create a visual distinction between sections of content in both horizontal and vertical orientations. The component supports decorative separators which are not accessible to screen readers, making it versatile for various design needs. It allows custom styling through className and provides control over its orientation.",<Separator orientation='vertical' className='custom-class' />,"className: string, orientation: 'horizontal' | 'vertical', decorative: boolean","---
title: Separator
description: Visually or semantically separates content.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/separator
  api: https://www.radix-ui.com/docs/primitives/components/separator#api-reference
---

<ComponentPreview name=""separator-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add separator
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>
<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-separator
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""separator"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { Separator } from ""@/components/ui/separator""
```

```tsx
<Separator />
```
",246.0
sheet.tsx,"""use client""

import * as React from ""react""
import * as SheetPrimitive from ""@radix-ui/react-dialog""
import { cva, type VariantProps } from ""class-variance-authority""
import { X } from ""lucide-react""

import { cn } from ""@/lib/utils""

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      ""fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0"",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  ""fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500"",
  {
    variants: {
      side: {
        top: ""inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top"",
        bottom:
          ""inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom"",
        left: ""inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm"",
        right:
          ""inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm"",
      },
    },
    defaultVariants: {
      side: ""right"",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = ""right"", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className=""absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary"">
        <X className=""h-4 w-4"" />
        <span className=""sr-only"">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      ""flex flex-col space-y-2 text-center sm:text-left"",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = ""SheetHeader""

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      ""flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2"",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = ""SheetFooter""

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn(""text-lg font-semibold text-foreground"", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn(""text-sm text-muted-foreground"", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
",www\registry\default\ui\sheet.tsx,1036,"This component is a part of a UI framework that utilizes Radix UI's dialog component to create a customizable sheet (modal or drawer) that can slide in from any side of the viewport. It supports features such as a backdrop overlay, close button, and portals for rendering the sheet outside of the regular DOM flow. The sheet's appearance and animations are customizable via props.",<Sheet><SheetTrigger>Open Sheet</SheetTrigger><SheetContent side='right'>Content here<SheetClose /></SheetContent></Sheet>,"side: 'top' | 'bottom' | 'left' | 'right', className: string, children: React.ReactNode","---
title: Sheet
description: Extends the Dialog component to display content that complements the main content of the screen.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/dialog
  api: https://www.radix-ui.com/docs/primitives/components/dialog#api-reference
---

<ComponentPreview name=""sheet-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add sheet
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-dialog
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""sheet"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

### Usage

```tsx
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from ""@/components/ui/sheet""
```

```tsx
<Sheet>
  <SheetTrigger>Open</SheetTrigger>
  <SheetContent>
    <SheetHeader>
      <SheetTitle>Are you absolutely sure?</SheetTitle>
      <SheetDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </SheetDescription>
    </SheetHeader>
  </SheetContent>
</Sheet>
```

## Examples

### Side

Use the `side` property to `<SheetContent />` to indicate the edge of the screen where the component will appear. The values can be `top`, `right`, `bottom` or `left`.

<ComponentPreview name=""sheet-side"" />

### Size

You can adjust the size of the sheet using CSS classes:

```tsx {3}
<Sheet>
  <SheetTrigger>Open</SheetTrigger>
  <SheetContent className=""w-[400px] sm:w-[540px]"">
    <SheetHeader>
      <SheetTitle>Are you absolutely sure?</SheetTitle>
      <SheetDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </SheetDescription>
    </SheetHeader>
  </SheetContent>
</Sheet>
```
",527.0
skeleton.tsx,"import { cn } from ""@/lib/utils""

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn(""animate-pulse rounded-md bg-muted"", className)}
      {...props}
    />
  )
}

export { Skeleton }
",www\registry\default\ui\skeleton.tsx,62,Skeleton is a component that provides a placeholder preview of the content before the data gets loaded. It uses Tailwind CSS for styling and animation. The component is highly customizable with any div element attributes.,<Skeleton className='h-4 w-48' />,"className: string, ...props: React.HTMLAttributes<HTMLDivElement>","---
title: Skeleton
description: Use to show a placeholder while content is loading.
component: true
---

<ComponentPreview name=""skeleton-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add skeleton
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""skeleton"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { Skeleton } from ""@/components/ui/skeleton""
```

```tsx
<Skeleton className=""w-[100px] h-[20px] rounded-full"" />
```

## Examples

### Card

<ComponentPreview name=""skeleton-card"" />
",216.0
slider.tsx,"""use client""

import * as React from ""react""
import * as SliderPrimitive from ""@radix-ui/react-slider""

import { cn } from ""@/lib/utils""

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      ""relative flex w-full touch-none select-none items-center"",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className=""relative h-2 w-full grow overflow-hidden rounded-full bg-secondary"">
      <SliderPrimitive.Range className=""absolute h-full bg-primary"" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className=""block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50"" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
",www\registry\default\ui\slider.tsx,235,"The Slider component is a customizable slider control built using React and the Radix UI Slider primitive. It provides a flexible and accessible way to select a single value or a range from a sequence of values. The component is styled with utility classes for dimensions, colors, and states, making it easy to integrate and customize within a UI design system.",<Slider className='my-custom-slider' defaultValue={[50]} step={10} min={0} max={100} aria-label='Volume control' />,"className: string, defaultValue: number[], step: number, min: number, max: number, aria-label: string","---
title: Slider
description: An input where the user selects a value from within a given range.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/slider
  api: https://www.radix-ui.com/docs/primitives/components/slider#api-reference
---

<ComponentPreview name=""slider-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add slider
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-slider
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""slider"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { Slider } from ""@/components/ui/slider""
```

```tsx
<Slider defaultValue={[33]} max={100} step={1} />
```
",260.0
sonner.tsx,"""use client""

import { useTheme } from ""next-themes""
import { Toaster as Sonner } from ""sonner""

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = ""system"" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps[""theme""]}
      className=""toaster group""
      toastOptions={{
        classNames: {
          toast:
            ""group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg"",
          description: ""group-[.toast]:text-muted-foreground"",
          actionButton:
            ""group-[.toast]:bg-primary group-[.toast]:text-primary-foreground"",
          cancelButton:
            ""group-[.toast]:bg-muted group-[.toast]:text-muted-foreground"",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }
",www\registry\default\ui\sonner.tsx,218,"The `Toaster` component is a wrapper around the `Sonner` component from the `sonner` library, customized to work with the `next-themes` library for theme management. It accepts various props to customize the appearance and behavior of toast notifications, including theme, className, and toastOptions for detailed styling adjustments.","<Toaster theme='light' className='custom-toaster' toastOptions={{ classNames: { toast: 'custom-toast', description: 'custom-description', actionButton: 'custom-actionButton', cancelButton: 'custom-cancelButton' } }} />","theme: string, className: string, toastOptions: { classNames: { toast: string, description: string, actionButton: string, cancelButton: string } }","---
title: Sonner
description: An opinionated toast component for React.
component: true
links:
  doc: https://sonner.emilkowal.ski
---

<ComponentPreview name=""sonner-demo"" />

## About

Sonner is built and maintained by [emilkowalski\_](https://twitter.com/emilkowalski_).

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

<Steps>

<Step>Run the following command:</Step>

```bash
npx shadcn-ui@latest add sonner
```

<Step>Add the Toaster component</Step>

```tsx title=""app/layout.tsx"" {1,9}
import { Toaster } from ""@/components/ui/sonner""

export default function RootLayout({ children }) {
  return (
    <html lang=""en"">
      <head />
      <body>
        <main>{children}</main>
        <Toaster />
      </body>
    </html>
  )
}
```

</Steps>

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install sonner next-themes
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""sonner"" />

<Step>Add the Toaster component</Step>

```tsx title=""app/layout.tsx"" {1,9}
import { Toaster } from ""@/components/ui/sonner""

export default function RootLayout({ children }) {
  return (
    <html lang=""en"">
      <head />
      <body>
        <main>{children}</main>
        <Toaster />
      </body>
    </html>
  )
}
```

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { toast } from ""sonner""
```

```tsx
toast(""Event has been created."")
```
",437.0
switch.tsx,"""use client""

import * as React from ""react""
import * as SwitchPrimitives from ""@radix-ui/react-switch""

import { cn } from ""@/lib/utils""

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      ""peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input"",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        ""pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0""
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
",www\registry\default\ui\switch.tsx,269,"The 'Switch' component is a reusable UI component built using React and the '@radix-ui/react-switch' library. It represents a toggle switch that users can interact with to change between two states, such as on and off. The component is styled with utility classes to be visually appealing and accessible, including focus and disabled states. It is customizable through props and supports forwarding refs for advanced React patterns.",<Switch className='custom-class' checked={true} onCheckedChange={(checked) => console.log(checked)} disabled={false} />,"className: string, checked: boolean, onCheckedChange: (checked: boolean) => void, disabled: boolean","---
title: Switch
description: A control that allows the user to toggle between checked and not checked.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/switch
  api: https://www.radix-ui.com/docs/primitives/components/switch#api-reference
---

<ComponentPreview name=""switch-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add switch
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-switch
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""switch"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { Switch } from ""@/components/ui/switch""
```

```tsx
<Switch />
```

## Examples

### Form

<ComponentPreview name=""switch-form"" />
",265.0
table.tsx,"import * as React from ""react""

import { cn } from ""@/lib/utils""

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className=""relative w-full overflow-auto"">
    <table
      ref={ref}
      className={cn(""w-full caption-bottom text-sm"", className)}
      {...props}
    />
  </div>
))
Table.displayName = ""Table""

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn(""[&_tr]:border-b"", className)} {...props} />
))
TableHeader.displayName = ""TableHeader""

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn(""[&_tr:last-child]:border-0"", className)}
    {...props}
  />
))
TableBody.displayName = ""TableBody""

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      ""border-t bg-muted/50 font-medium [&>tr]:last:border-b-0"",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = ""TableFooter""

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      ""border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted"",
      className
    )}
    {...props}
  />
))
TableRow.displayName = ""TableRow""

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      ""h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0"",
      className
    )}
    {...props}
  />
))
TableHead.displayName = ""TableHead""

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(""p-4 align-middle [&:has([role=checkbox])]:pr-0"", className)}
    {...props}
  />
))
TableCell.displayName = ""TableCell""

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn(""mt-4 text-sm text-muted-foreground"", className)}
    {...props}
  />
))
TableCaption.displayName = ""TableCaption""

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
",www\registry\default\ui\table.tsx,696,"A collection of React components designed to create a flexible and customizable table structure. These components include Table, TableHeader, TableBody, TableFooter, TableRow, TableHead, TableCell, and TableCaption, each designed for their respective roles within a table. They support forwarding refs and allow custom className through props for easy styling.","<Table>
  <TableHeader>
    <TableRow>
      <TableHead>Header 1</TableHead>
      <TableHead>Header 2</TableHead>
    </TableRow>
  </TableHeader>
  <TableBody>
    <TableRow>
      <TableCell>Data 1</TableCell>
      <TableCell>Data 2</TableCell>
    </TableRow>
    <TableRow>
      <TableCell>Data 3</TableCell>
      <TableCell>Data 4</TableCell>
    </TableRow>
  </TableBody>
  <TableFooter>
    <TableRow>
      <TableCell>Footer 1</TableCell>
      <TableCell>Footer 2</TableCell>
    </TableRow>
  </TableFooter>
</Table>","Table: className (string), ...props (React.HTMLAttributes<HTMLTableElement>), TableHeader: className (string), ...props (React.HTMLAttributes<HTMLTableSectionElement>), TableBody: className (string), ...props (React.HTMLAttributes<HTMLTableSectionElement>), TableFooter: className (string), ...props (React.HTMLAttributes<HTMLTableSectionElement>), TableRow: className (string), ...props (React.HTMLAttributes<HTMLTableRowElement>), TableHead: className (string), ...props (React.ThHTMLAttributes<HTMLTableCellElement>), TableCell: className (string), ...props (React.TdHTMLAttributes<HTMLTableCellElement>), TableCaption: className (string), ...props (React.HTMLAttributes<HTMLTableCaptionElement>)","---
title: Table
description: A responsive table component.
component: true
---

<ComponentPreview name=""table-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add table
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""table"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from ""@/components/ui/table""
```

```tsx
<Table>
  <TableCaption>A list of your recent invoices.</TableCaption>
  <TableHeader>
    <TableRow>
      <TableHead className=""w-[100px]"">Invoice</TableHead>
      <TableHead>Status</TableHead>
      <TableHead>Method</TableHead>
      <TableHead className=""text-right"">Amount</TableHead>
    </TableRow>
  </TableHeader>
  <TableBody>
    <TableRow>
      <TableCell className=""font-medium"">INV001</TableCell>
      <TableCell>Paid</TableCell>
      <TableCell>Credit Card</TableCell>
      <TableCell className=""text-right"">$250.00</TableCell>
    </TableRow>
  </TableBody>
</Table>
```

## Data Table

You can use the `<Table />` component to build more complex data tables. Combine it with [@tanstack/react-table](https://tanstack.com/table/v8) to create tables with sorting, filtering and pagination.

See the [Data Table](/docs/components/data-table) documentation for more information.

You can also see an example of a data table in the [Tasks](/examples/tasks) demo.
",435.0
tabs.tsx,"""use client""

import * as React from ""react""
import * as TabsPrimitive from ""@radix-ui/react-tabs""

import { cn } from ""@/lib/utils""

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      ""inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground"",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      ""inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm"",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      ""mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
",www\registry\default\ui\tabs.tsx,428,"This component is a custom implementation of tabs using the @radix-ui/react-tabs primitives. It provides a set of components to create a tabbed interface, including Tabs (the container), TabsList (the list of tab triggers), TabsTrigger (the tab buttons), and TabsContent (the content of the tab). Each component is styled with a default style and allows for custom class names for further styling.","<Tabs defaultValue='tab1'>
  <TabsList aria-label='Manage your account'>
    <TabsTrigger value='tab1'>Tab 1</TabsTrigger>
    <TabsTrigger value='tab2'>Tab 2</TabsTrigger>
  </TabsList>
  <TabsContent value='tab1'>Content 1</TabsContent>
  <TabsContent value='tab2'>Content 2</TabsContent>
</Tabs>","TabsList: className: string, ...props: any, TabsTrigger: className: string, ...props: any, TabsContent: className: string, ...props: any","---
title: Tabs
description: A set of layered sections of content—known as tab panels—that are displayed one at a time.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/tabs
  api: https://www.radix-ui.com/docs/primitives/components/tabs#api-reference
---

<ComponentPreview name=""tabs-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add tabs
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-tabs
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""tabs"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { Tabs, TabsContent, TabsList, TabsTrigger } from ""@/components/ui/tabs""
```

```tsx
<Tabs defaultValue=""account"" className=""w-[400px]"">
  <TabsList>
    <TabsTrigger value=""account"">Account</TabsTrigger>
    <TabsTrigger value=""password"">Password</TabsTrigger>
  </TabsList>
  <TabsContent value=""account"">Make changes to your account here.</TabsContent>
  <TabsContent value=""password"">Change your password here.</TabsContent>
</Tabs>
```
",350.0
textarea.tsx,"import * as React from ""react""

import { cn } from ""@/lib/utils""

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          ""flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = ""Textarea""

export { Textarea }
",www\registry\default\ui\textarea.tsx,174,"The Textarea component is a customizable textarea element that integrates seamlessly with a React project. It extends all standard HTMLTextAreaElement attributes, allowing for full native functionality, while also providing enhanced styling capabilities through Tailwind CSS classes. The component supports all the usual textarea attributes such as `placeholder`, `disabled`, `value`, etc., and allows for additional styling with a custom `className`.",<Textarea className='custom-class' placeholder='Enter your text here' disabled={false} />,"className: string, all standard HTMLTextAreaElement attributes","---
title: Textarea
description: Displays a form textarea or a component that looks like a textarea.
component: true
---

<ComponentPreview name=""textarea-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add textarea
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""textarea"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { Textarea } from ""@/components/ui/textarea""
```

```tsx
<Textarea />
```

## Examples

### Default

<ComponentPreview name=""textarea-demo"" />

### Disabled

<ComponentPreview name=""textarea-disabled"" />

### With Label

<ComponentPreview name=""textarea-with-label"" className=""[&_div.grid]:w-full"" />

### With Text

<ComponentPreview name=""textarea-with-text"" />

### With Button

<ComponentPreview name=""textarea-with-button"" />

### Form

<ComponentPreview name=""textarea-form"" />
",273.0
toast.tsx,"import * as React from ""react""
import * as ToastPrimitives from ""@radix-ui/react-toast""
import { cva, type VariantProps } from ""class-variance-authority""
import { X } from ""lucide-react""

import { cn } from ""@/lib/utils""

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      ""fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]"",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  ""group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full"",
  {
    variants: {
      variant: {
        default: ""border bg-background text-foreground"",
        destructive:
          ""destructive group border-destructive bg-destructive text-destructive-foreground"",
      },
    },
    defaultVariants: {
      variant: ""default"",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      ""inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive"",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      ""absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600"",
      className
    )}
    toast-close=""""
    {...props}
  >
    <X className=""h-4 w-4"" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn(""text-sm font-semibold"", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn(""text-sm opacity-90"", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
",www\registry\default\ui\toast.tsx,1152,"This component is a customizable toast notification system built with React and Radix UI. It provides a flexible and accessible way to display brief messages or notifications to the user. The system includes a toast provider, viewport, and customizable toast elements with support for actions, close buttons, titles, and descriptions. It leverages the Radix UI toast primitives and class variance authority for styling variants.",<ToastProvider><Toast variant='default' onClose={() => console.log('Toast closed')}><ToastTitle>Title</ToastTitle><ToastDescription>Description</ToastDescription><ToastAction as='button' onClick={() => console.log('Action clicked')}>Action</ToastAction><ToastClose /></Toast></ToastProvider>,"className: string, variant: 'default' | 'destructive', onClose: () => void","---
title: Toast
description: A succinct message that is displayed temporarily.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/toast
  api: https://www.radix-ui.com/docs/primitives/components/toast#api-reference
---

<ComponentPreview name=""toast-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

<Steps>

<Step>Run the following command:</Step>

```bash
npx shadcn-ui@latest add toast
```

<Step>Add the Toaster component</Step>

```tsx title=""app/layout.tsx"" {1,9}
import { Toaster } from ""@/components/ui/toaster""

export default function RootLayout({ children }) {
  return (
    <html lang=""en"">
      <head />
      <body>
        <main>{children}</main>
        <Toaster />
      </body>
    </html>
  )
}
```

</Steps>

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-toast
```

<Step>Copy and paste the following code into your project.</Step>

`toast.tsx`

<ComponentSource name=""toast"" />

`toaster.tsx`

<ComponentSource name=""toast"" fileName=""toaster"" />

`use-toast.tsx`

<ComponentSource name=""toast"" fileName=""use-toast"" />

<Step>Update the import paths to match your project setup.</Step>

<Step>Add the Toaster component</Step>

```tsx title=""app/layout.tsx"" {1,9}
import { Toaster } from ""@/components/ui/toaster""

export default function RootLayout({ children }) {
  return (
    <html lang=""en"">
      <head />
      <body>
        <main>{children}</main>
        <Toaster />
      </body>
    </html>
  )
}
```

</Steps>

</TabsContent>

</Tabs>

## Usage

The `useToast` hook returns a `toast` function that you can use to display a toast.

```tsx
import { useToast } from ""@/components/ui/use-toast""
```

```tsx {2,7-10}
export const ToastDemo = () => {
  const { toast } = useToast()

  return (
    <Button
      onClick={() => {
        toast({
          title: ""Scheduled: Catch up"",
          description: ""Friday, February 10, 2023 at 5:57 PM"",
        })
      }}
    >
      Show Toast
    </Button>
  )
}
```

<Callout>

To display multiple toasts at the same time, you can update the `TOAST_LIMIT` in `use-toast.tsx`.

</Callout>

## Examples

### Simple

<ComponentPreview name=""toast-simple"" />

### With title

<ComponentPreview name=""toast-with-title"" />

### With Action

<ComponentPreview name=""toast-with-action"" />

### Destructive

Use `toast({ variant: ""destructive"" })` to display a destructive toast.

<ComponentPreview name=""toast-destructive"" />
",689.0
toaster.tsx,"""use client""

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from ""@/registry/default/ui/toast""
import { useToast } from ""@/registry/default/ui/use-toast""

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className=""grid gap-1"">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
",www\registry\default\ui\toaster.tsx,180,"The Toaster component is used to display a list of toast notifications. It leverages the useToast hook to access the current toasts and renders them within a ToastProvider. Each toast can have a title, description, and an optional action. The component also includes a close button for each toast and is contained within a viewport.",<Toaster />,"id: string, title: string, description: string, action: JSX.Element",,
toggle-group.tsx,"""use client""

import * as React from ""react""
import * as ToggleGroupPrimitive from ""@radix-ui/react-toggle-group""
import { VariantProps } from ""class-variance-authority""

import { cn } from ""@/lib/utils""
import { toggleVariants } from ""@/registry/default/ui/toggle""

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: ""default"",
  variant: ""default"",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn(""flex items-center justify-center gap-1"", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
",www\registry\default\ui\toggle-group.tsx,381,"The ToggleGroup component is built using Radix UI's ToggleGroupPrimitive and provides a grouped set of toggle buttons. It allows for custom styling and size variants through the 'class-variance-authority' library. The component utilizes context to share variant and size props among the ToggleGroup and its Items, ensuring consistent styling across the group.","<ToggleGroup variant='primary' size='large'>
  <ToggleGroupItem value='item1'>Item 1</ToggleGroupItem>
  <ToggleGroupItem value='item2'>Item 2</ToggleGroupItem>
  <ToggleGroupItem value='item3'>Item 3</ToggleGroupItem>
</ToggleGroup>","className: string, variant: 'default' | 'primary' | 'secondary', size: 'small' | 'default' | 'large', children: React.ReactNode","---
title: Toggle Group
description: A set of two-state buttons that can be toggled on or off.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/toggle-group
  api: https://www.radix-ui.com/docs/primitives/components/toggle-group#api-reference
---

<ComponentPreview name=""toggle-group-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add toggle-group
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-toggle-group
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""toggle-group"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { ToggleGroup, ToggleGroupItem } from ""@/components/ui/toggle-group""
```

```tsx
<ToggleGroup type=""single"">
  <ToggleGroupItem value=""a"">A</ToggleGroupItem>
  <ToggleGroupItem value=""b"">B</ToggleGroupItem>
  <ToggleGroupItem value=""c"">C</ToggleGroupItem>
</ToggleGroup>
```

## Examples

### Default

<ComponentPreview name=""toggle-group-demo"" />

### Outline

<ComponentPreview name=""toggle-group-outline"" />

### Single

<ComponentPreview name=""toggle-group-single"" />

### Small

<ComponentPreview name=""toggle-group-sm"" />

### Large

<ComponentPreview name=""toggle-group-lg"" />

### Disabled

<ComponentPreview name=""toggle-group-disabled"" />
",393.0
toggle.tsx,"""use client""

import * as React from ""react""
import * as TogglePrimitive from ""@radix-ui/react-toggle""
import { cva, type VariantProps } from ""class-variance-authority""

import { cn } from ""@/lib/utils""

const toggleVariants = cva(
  ""inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground"",
  {
    variants: {
      variant: {
        default: ""bg-transparent"",
        outline:
          ""border border-input bg-transparent hover:bg-accent hover:text-accent-foreground"",
      },
      size: {
        default: ""h-10 px-3"",
        sm: ""h-9 px-2.5"",
        lg: ""h-11 px-5"",
      },
    },
    defaultVariants: {
      variant: ""default"",
      size: ""default"",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
",www\registry\default\ui\toggle.tsx,346,"The `Toggle` component is a customizable toggle button built using React and the Radix UI Primitive library. It leverages the `class-variance-authority` (cva) for styling, allowing for variant and size customization. The component is designed to be flexible, with support for different sizes and an 'outline' variant, in addition to the default style. It integrates focus and hover states for accessibility and enhanced user experience.",<Toggle variant='outline' size='lg' aria-label='Toggle Element' />,"className: string, variant: 'default' | 'outline', size: 'default' | 'sm' | 'lg'","---
title: Toggle
description: A two-state button that can be either on or off.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/toggle
  api: https://www.radix-ui.com/docs/primitives/components/toggle#api-reference
---

<ComponentPreview name=""toggle-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add toggle
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-toggle
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""toggle"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { Toggle } from ""@/components/ui/toggle""
```

```tsx
<Toggle>Toggle</Toggle>
```

## Examples

### Default

<ComponentPreview name=""toggle-demo"" />

### Outline

<ComponentPreview name=""toggle-outline"" />

### With Text

<ComponentPreview name=""toggle-with-text"" />

### Small

<ComponentPreview name=""toggle-sm"" />

### Large

<ComponentPreview name=""toggle-lg"" />

### Disabled

<ComponentPreview name=""toggle-disabled"" />
",324.0
tooltip.tsx,"""use client""

import * as React from ""react""
import * as TooltipPrimitive from ""@radix-ui/react-tooltip""

import { cn } from ""@/lib/utils""

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      ""z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2"",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
",www\registry\default\ui\tooltip.tsx,275,"This component is a customizable tooltip implementation using Radix UI's Tooltip primitives. It facilitates showing contextual overlays upon user interaction. The Tooltip component consists of a Provider for context, a Root component to initialize the tooltip, a Trigger that activates the tooltip, and a Content component that displays the actual tooltip content. The Content component is designed with a forwardRef to allow for DOM access and accepts various props including className and sideOffset for customization.",<TooltipProvider><Tooltip><TooltipTrigger asChild><button className='example-trigger-button'>Hover or focus me</button></TooltipTrigger><TooltipContent side='top' sideOffset={5} className='custom-tooltip-class'>Tooltip Content</TooltipContent></Tooltip></TooltipProvider>,"className: string, sideOffset: number, side: 'top' | 'right' | 'bottom' | 'left'","---
title: Tooltip
description: A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.
component: true
links:
  doc: https://www.radix-ui.com/docs/primitives/components/tooltip
  api: https://www.radix-ui.com/docs/primitives/components/tooltip#api-reference
---

<ComponentPreview name=""tooltip-demo"" />

## Installation

<Tabs defaultValue=""cli"">

<TabsList>
  <TabsTrigger value=""cli"">CLI</TabsTrigger>
  <TabsTrigger value=""manual"">Manual</TabsTrigger>
</TabsList>
<TabsContent value=""cli"">

```bash
npx shadcn-ui@latest add tooltip
```

</TabsContent>

<TabsContent value=""manual"">

<Steps>

<Step>Install the following dependencies:</Step>

```bash
npm install @radix-ui/react-tooltip
```

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name=""tooltip"" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from ""@/components/ui/tooltip""
```

```tsx
<TooltipProvider>
  <Tooltip>
    <TooltipTrigger>Hover</TooltipTrigger>
    <TooltipContent>
      <p>Add to library</p>
    </TooltipContent>
  </Tooltip>
</TooltipProvider>
```
",316.0
